---
http_interactions:
- request:
    method: get
    uri: https://medium.com/feed/@vaidehijoshi
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:14 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - private, must-revalidate, max-age=900
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Wed, 21 Oct 2020 15:23:14 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - private
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '320'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292894380:470184a8a4e7
      X-Opentracing:
      - '{"ot-tracer-spanid":"61b2441b14e5a9dd","ot-tracer-traceid":"511e106851f0a1a0","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d2c3c0000cd22d4ae1000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be48d2bbfcd22-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 21 Oct 2020 15:08:15 GMT
- request:
    method: get
    uri: https://circleci.com/blog/feed.xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/xml
      Date:
      - Wed, 21 Oct 2020 15:08:16 GMT
      Etag:
      - '"db0e9f9cae7024117d00274d790975a4"'
      Last-Modified:
      - Tue, 20 Oct 2020 20:14:07 GMT
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=15724800
      X-Amz-Id-2:
      - sn22/8j7z0QGG9qyxRnMTKHyNCgakduQTIT4FaN24a9e+xiaVzY58pTJ/04KxZWwEuGtAo53wBo=
      X-Amz-Request-Id:
      - E66763BF99A494DD
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '150162'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 21 Oct 2020 15:08:17 GMT
- request:
    method: get
    uri: https://medium.com/feed/@macsiri/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:17 GMT
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '67'
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Location:
      - https://medium.com/feed/@macsiri
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      X-Envoy-Upstream-Service-Time:
      - '0'
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d392b0000cd1ef6911000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4a1d946cd1e-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: UTF-8
      string: "<a href=\"https://medium.com/feed/@macsiri\">Moved Permanently</a>.\n\n"
  recorded_at: Wed, 21 Oct 2020 15:08:17 GMT
- request:
    method: get
    uri: https://medium.com/feed/@macsiri
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=dfe5ad9932edf03d98e80e2602b11971e1603292897; __cfruid=4df179546eafdfa1b3f38df0e5f3eae826c0b23e-1603292897
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:18 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - private, must-revalidate, max-age=900
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Wed, 21 Oct 2020 15:23:18 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - private
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '19'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292898202:a2383ea655c9
      X-Opentracing:
      - '{"ot-tracer-spanid":"6e540e0262c5c4b8","ot-tracer-traceid":"20d1ddb8ffe005e0","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d3a210000fc91ba0b9000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4a36a92fc91-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48cnNzIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6Y29udGVudD0iaHR0cDovL3B1cmwub3JnL3Jzcy8xLjAvbW9kdWxlcy9jb250ZW50LyIgeG1sbnM6YXRvbT0iaHR0cDovL3d3dy53My5vcmcvMjAwNS9BdG9tIiB2ZXJzaW9uPSIyLjAiIHhtbG5zOmNjPSJodHRwOi8vY3liZXIubGF3LmhhcnZhcmQuZWR1L3Jzcy9jcmVhdGl2ZUNvbW1vbnNSc3NNb2R1bGUuaHRtbCI+CiAgICA8Y2hhbm5lbD4KICAgICAgICA8dGl0bGU+PCFbQ0RBVEFbU3RvcmllcyBieSBNYWMgU2lyaSBvbiBNZWRpdW1dXT48L3RpdGxlPgogICAgICAgIDxkZXNjcmlwdGlvbj48IVtDREFUQVtTdG9yaWVzIGJ5IE1hYyBTaXJpIG9uIE1lZGl1bV1dPjwvZGVzY3JpcHRpb24+CiAgICAgICAgPGxpbms+aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWNzaXJpP3NvdXJjZT1yc3MtNGIyNjA1ZGE5MzhmLS0tLS0tMjwvbGluaz4KICAgICAgICA8aW1hZ2U+CiAgICAgICAgICAgIDx1cmw+aHR0cHM6Ly9jZG4taW1hZ2VzLTEubWVkaXVtLmNvbS9maXQvYy8xNTAvMTUwLzAqdzJibXRXbGFsZEtGbGI4ZS48L3VybD4KICAgICAgICAgICAgPHRpdGxlPlN0b3JpZXMgYnkgTWFjIFNpcmkgb24gTWVkaXVtPC90aXRsZT4KICAgICAgICAgICAgPGxpbms+aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWNzaXJpP3NvdXJjZT1yc3MtNGIyNjA1ZGE5MzhmLS0tLS0tMjwvbGluaz4KICAgICAgICA8L2ltYWdlPgogICAgICAgIDxnZW5lcmF0b3I+TWVkaXVtPC9nZW5lcmF0b3I+CiAgICAgICAgPGxhc3RCdWlsZERhdGU+V2VkLCAyMSBPY3QgMjAyMCAxNDo1Njo1NyBHTVQ8L2xhc3RCdWlsZERhdGU+CiAgICAgICAgPGF0b206bGluayBocmVmPSJodHRwczovL21lZGl1bS5jb20vZmVlZC9AbWFjc2lyaSIgcmVsPSJzZWxmIiB0eXBlPSJhcHBsaWNhdGlvbi9yc3MreG1sIi8+CiAgICAgICAgPHdlYk1hc3Rlcj48IVtDREFUQVt5b3VyZnJpZW5kc0BtZWRpdW0uY29tXV0+PC93ZWJNYXN0ZXI+CiAgICAgICAgPGF0b206bGluayBocmVmPSJodHRwOi8vbWVkaXVtLnN1cGVyZmVlZHIuY29tIiByZWw9Imh1YiIvPgogICAgICAgIDxpdGVtPgogICAgICAgICAgICA8dGl0bGU+PCFbQ0RBVEFbVGVzdGluZyBSU1MgRmVlZF1dPjwvdGl0bGU+CiAgICAgICAgICAgIDxsaW5rPmh0dHBzOi8vbWVkaXVtLmNvbS9AbWFjc2lyaS90ZXN0aW5nLXJzcy1mZWVkLTZhZjA0YjdlNTdlMT9zb3VyY2U9cnNzLTRiMjYwNWRhOTM4Zi0tLS0tLTI8L2xpbms+CiAgICAgICAgICAgIDxndWlkIGlzUGVybWFMaW5rPSJmYWxzZSI+aHR0cHM6Ly9tZWRpdW0uY29tL3AvNmFmMDRiN2U1N2UxPC9ndWlkPgogICAgICAgICAgICA8Y2F0ZWdvcnk+PCFbQ0RBVEFbdGVzdF1dPjwvY2F0ZWdvcnk+CiAgICAgICAgICAgIDxkYzpjcmVhdG9yPjwhW0NEQVRBW01hYyBTaXJpXV0+PC9kYzpjcmVhdG9yPgogICAgICAgICAgICA8cHViRGF0ZT5UdWUsIDAyIEphbiAyMDE4IDE5OjA2OjMwIEdNVDwvcHViRGF0ZT4KICAgICAgICAgICAgPGF0b206dXBkYXRlZD4yMDE5LTA2LTE5VDIxOjM4OjA3LjU0OVo8L2F0b206dXBkYXRlZD4KICAgICAgICAgICAgPGNvbnRlbnQ6ZW5jb2RlZD48IVtDREFUQVs8cD55b3V0dWJlIGxpbmvCoGhlcmU8L3A+PGlmcmFtZSBzcmM9Imh0dHBzOi8vY2RuLmVtYmVkbHkuY29tL3dpZGdldHMvbWVkaWEuaHRtbD9zcmM9aHR0cHMlM0ElMkYlMkZ3d3cueW91dHViZS5jb20lMkZlbWJlZCUyRlFPQ2FhY084d3VzJTNGZmVhdHVyZSUzRG9lbWJlZCZhbXA7ZGlzcGxheV9uYW1lPVlvdVR1YmUmYW1wO3VybD1odHRwcyUzQSUyRiUyRnd3dy55b3V0dWJlLmNvbSUyRndhdGNoJTNGdiUzRFFPQ2FhY084d3VzJmFtcDtpbWFnZT1odHRwcyUzQSUyRiUyRmkueXRpbWcuY29tJTJGdmklMkZRT0NhYWNPOHd1cyUyRmhxZGVmYXVsdC5qcGcmYW1wO2tleT1hMTlmY2MxODRiOTcxMWUxYjQ3NjQwNDBkM2RjNWMwNyZhbXA7dHlwZT10ZXh0JTJGaHRtbCZhbXA7c2NoZW1hPXlvdXR1YmUiIHdpZHRoPSI4NTQiIGhlaWdodD0iNDgwIiBmcmFtZWJvcmRlcj0iMCIgc2Nyb2xsaW5nPSJubyI+PGEgaHJlZj0iaHR0cHM6Ly9tZWRpdW0uY29tL21lZGlhLzdkYTc0YmIzMGY4YTJhODJiMGFjYjg5YjIxM2EwMThiL2hyZWYiPmh0dHBzOi8vbWVkaXVtLmNvbS9tZWRpYS83ZGE3NGJiMzBmOGEyYTgyYjBhY2I4OWIyMTNhMDE4Yi9ocmVmPC9hPjwvaWZyYW1lPjxwPnR3ZWV0IGhlcmU8L3A+PHN0eWxlPmJvZHlbZGF0YS10d3R0ci1yZW5kZXJlZD0idHJ1ZSJdIHtiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDt9LnR3aXR0ZXItdHdlZXQge21hcmdpbjogYXV0byAhaW1wb3J0YW50O308L3N0eWxlPjxibG9ja3F1b3RlIGNsYXNzPSJ0d2l0dGVyLXR3ZWV0IiBkYXRhLWNvbnZlcnNhdGlvbj0ibm9uZSIgZGF0YS1hbGlnbj0iY2VudGVyIiBkYXRhLWRudD0idHJ1ZSI+PHA+JiN4MjAwYTsmbWRhc2g7JiN4MjAwYTs8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2JlbmRoYWxwZXJuL3N0YXR1cy85NDgyNTYwODMzNTI3MzU3NDQiPkBiZW5kaGFscGVybjwvYT48L3A+PC9ibG9ja3F1b3RlPjxzY3JpcHQgc3JjPSIvL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanMiIGNoYXJzZXQ9InV0Zi04Ij48L3NjcmlwdD48c2NyaXB0PmZ1bmN0aW9uIG5vdGlmeVJlc2l6ZShoZWlnaHQpIHtoZWlnaHQgPSBoZWlnaHQgPyBoZWlnaHQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0OyB2YXIgcmVzaXplZCA9IGZhbHNlOyBpZiAod2luZG93LmRvbmtleSAmJiBkb25rZXkucmVzaXplKSB7ZG9ua2V5LnJlc2l6ZShoZWlnaHQpO3Jlc2l6ZWQgPSB0cnVlO31pZiAocGFyZW50ICYmIHBhcmVudC5fcmVzaXplSWZyYW1lKSB7dmFyIG9iaiA9IHtpZnJhbWU6IHdpbmRvdy5mcmFtZUVsZW1lbnQsIGhlaWdodDogaGVpZ2h0fTsgcGFyZW50Ll9yZXNpemVJZnJhbWUob2JqKTsgcmVzaXplZCA9IHRydWU7fWlmICh3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICIjYW1wPTEiICYmIHdpbmRvdy5wYXJlbnQgJiYgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSkge3dpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2Uoe3NlbnRpbmVsOiAiYW1wIiwgdHlwZTogImVtYmVkLXNpemUiLCBoZWlnaHQ6IGhlaWdodH0sICIqIik7fWlmICh3aW5kb3cud2Via2l0ICYmIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzICYmIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLnJlc2l6ZSkge3dpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLnJlc2l6ZS5wb3N0TWVzc2FnZShoZWlnaHQpOyByZXNpemVkID0gdHJ1ZTt9cmV0dXJuIHJlc2l6ZWQ7fXR3dHRyLmV2ZW50cy5iaW5kKCdyZW5kZXJlZCcsIGZ1bmN0aW9uIChldmVudCkge25vdGlmeVJlc2l6ZSgpO30pOyB0d3R0ci5ldmVudHMuYmluZCgncmVzaXplJywgZnVuY3Rpb24gKGV2ZW50KSB7bm90aWZ5UmVzaXplKCk7fSk7PC9zY3JpcHQ+PHNjcmlwdD5pZiAocGFyZW50ICYmIHBhcmVudC5fcmVzaXplSWZyYW1lKSB7dmFyIG1heFdpZHRoID0gcGFyc2VJbnQod2luZG93LmZyYW1lRWxlbWVudC5nZXRBdHRyaWJ1dGUoIndpZHRoIikpOyBpZiAoIDUwMCAgPCBtYXhXaWR0aCkge3dpbmRvdy5mcmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJ3aWR0aCIsICI1MDAiKTt9fTwvc2NyaXB0PjxwPkdpdGh1YiBnaXN0wqBoZXJlPC9wPjxpZnJhbWUgc3JjPSIiIHdpZHRoPSIwIiBoZWlnaHQ9IjAiIGZyYW1lYm9yZGVyPSIwIiBzY3JvbGxpbmc9Im5vIj48YSBocmVmPSJodHRwczovL21lZGl1bS5jb20vbWVkaWEvNzc3YWU4YjdkODkxNmU1NjViODRiNzA0YzA4OGNmMGMvaHJlZiI+aHR0cHM6Ly9tZWRpdW0uY29tL21lZGlhLzc3N2FlOGI3ZDg5MTZlNTY1Yjg0YjcwNGMwODhjZjBjL2hyZWY8L2E+PC9pZnJhbWU+PHA+Y29kZSBibG9jazwvcD48cHJlPnRlc3RzZXRzZXRzZXRzZXRzZXRzZXQgbGV0cyBpbnRyb2R1Y2Ugc29tZSB7eyBjaGFvcyB9fTwvcHJlPjxwcmU+SGVyZSYjMzk7cyBtb3JlIHt7IHdoYXQgfX08L3ByZT48cD5zb21lIG1vcmUgY29kZSBhbmQge3sgVkFSSUFCTEUgfX0gYW5kIDxzdHJvbmc+PGVtPnt7IEhUTUzCoH19PC9lbT48L3N0cm9uZz48L3A+PGgzPnt7IGhvdyBhYm91dCB0aGlzwqB9fTwvaDM+PGltZyBzcmM9Imh0dHBzOi8vbWVkaXVtLmNvbS9fL3N0YXQ/ZXZlbnQ9cG9zdC5jbGllbnRWaWV3ZWQmcmVmZXJyZXJTb3VyY2U9ZnVsbF9yc3MmcG9zdElkPTZhZjA0YjdlNTdlMSIgd2lkdGg9IjEiIGhlaWdodD0iMSIgYWx0PSIiPl1dPjwvY29udGVudDplbmNvZGVkPgogICAgICAgIDwvaXRlbT4KICAgIDwvY2hhbm5lbD4KPC9yc3M+
  recorded_at: Wed, 21 Oct 2020 15:08:18 GMT
- request:
    method: get
    uri: https://medium.com/feed/@vaidehijoshi
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:18 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - private, must-revalidate, max-age=900
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Wed, 21 Oct 2020 15:23:18 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - private
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '27'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292898555:aef079eb781a
      X-Opentracing:
      - '{"ot-tracer-spanid":"03d9be6025b5743d","ot-tracer-traceid":"420285830ad9956b","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d3cad0000cd1efd2f6000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4a778e3cd1e-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 21 Oct 2020 15:08:23 GMT
- request:
    method: get
    uri: https://medium.com/feed/@macsiri/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:18 GMT
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '67'
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Location:
      - https://medium.com/feed/@macsiri
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      X-Envoy-Upstream-Service-Time:
      - '0'
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d3c9200006f64b602c000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4a74c246f64-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: UTF-8
      string: "<a href=\"https://medium.com/feed/@macsiri\">Moved Permanently</a>.\n\n"
  recorded_at: Wed, 21 Oct 2020 15:08:23 GMT
- request:
    method: get
    uri: https://medium.com/feed/@macsiri
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=d84714b898ae5dc7f4073e11cfbb796741603292898; __cfruid=5f68016d193c01663bc1b35405297b03d18c2058-1603292898
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:19 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - private, must-revalidate, max-age=900
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Wed, 21 Oct 2020 15:23:19 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - private
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '18'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292899057:4d9232d6b45c
      X-Opentracing:
      - '{"ot-tracer-spanid":"0c2c7679201d6849","ot-tracer-traceid":"3b59557414d92dfe","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d3e9f0000fc8945a14000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4aa9ddefc89-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48cnNzIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6Y29udGVudD0iaHR0cDovL3B1cmwub3JnL3Jzcy8xLjAvbW9kdWxlcy9jb250ZW50LyIgeG1sbnM6YXRvbT0iaHR0cDovL3d3dy53My5vcmcvMjAwNS9BdG9tIiB2ZXJzaW9uPSIyLjAiIHhtbG5zOmNjPSJodHRwOi8vY3liZXIubGF3LmhhcnZhcmQuZWR1L3Jzcy9jcmVhdGl2ZUNvbW1vbnNSc3NNb2R1bGUuaHRtbCI+CiAgICA8Y2hhbm5lbD4KICAgICAgICA8dGl0bGU+PCFbQ0RBVEFbU3RvcmllcyBieSBNYWMgU2lyaSBvbiBNZWRpdW1dXT48L3RpdGxlPgogICAgICAgIDxkZXNjcmlwdGlvbj48IVtDREFUQVtTdG9yaWVzIGJ5IE1hYyBTaXJpIG9uIE1lZGl1bV1dPjwvZGVzY3JpcHRpb24+CiAgICAgICAgPGxpbms+aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWNzaXJpP3NvdXJjZT1yc3MtNGIyNjA1ZGE5MzhmLS0tLS0tMjwvbGluaz4KICAgICAgICA8aW1hZ2U+CiAgICAgICAgICAgIDx1cmw+aHR0cHM6Ly9jZG4taW1hZ2VzLTEubWVkaXVtLmNvbS9maXQvYy8xNTAvMTUwLzAqdzJibXRXbGFsZEtGbGI4ZS48L3VybD4KICAgICAgICAgICAgPHRpdGxlPlN0b3JpZXMgYnkgTWFjIFNpcmkgb24gTWVkaXVtPC90aXRsZT4KICAgICAgICAgICAgPGxpbms+aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWNzaXJpP3NvdXJjZT1yc3MtNGIyNjA1ZGE5MzhmLS0tLS0tMjwvbGluaz4KICAgICAgICA8L2ltYWdlPgogICAgICAgIDxnZW5lcmF0b3I+TWVkaXVtPC9nZW5lcmF0b3I+CiAgICAgICAgPGxhc3RCdWlsZERhdGU+V2VkLCAyMSBPY3QgMjAyMCAxNDo1Njo1NyBHTVQ8L2xhc3RCdWlsZERhdGU+CiAgICAgICAgPGF0b206bGluayBocmVmPSJodHRwczovL21lZGl1bS5jb20vZmVlZC9AbWFjc2lyaSIgcmVsPSJzZWxmIiB0eXBlPSJhcHBsaWNhdGlvbi9yc3MreG1sIi8+CiAgICAgICAgPHdlYk1hc3Rlcj48IVtDREFUQVt5b3VyZnJpZW5kc0BtZWRpdW0uY29tXV0+PC93ZWJNYXN0ZXI+CiAgICAgICAgPGF0b206bGluayBocmVmPSJodHRwOi8vbWVkaXVtLnN1cGVyZmVlZHIuY29tIiByZWw9Imh1YiIvPgogICAgICAgIDxpdGVtPgogICAgICAgICAgICA8dGl0bGU+PCFbQ0RBVEFbVGVzdGluZyBSU1MgRmVlZF1dPjwvdGl0bGU+CiAgICAgICAgICAgIDxsaW5rPmh0dHBzOi8vbWVkaXVtLmNvbS9AbWFjc2lyaS90ZXN0aW5nLXJzcy1mZWVkLTZhZjA0YjdlNTdlMT9zb3VyY2U9cnNzLTRiMjYwNWRhOTM4Zi0tLS0tLTI8L2xpbms+CiAgICAgICAgICAgIDxndWlkIGlzUGVybWFMaW5rPSJmYWxzZSI+aHR0cHM6Ly9tZWRpdW0uY29tL3AvNmFmMDRiN2U1N2UxPC9ndWlkPgogICAgICAgICAgICA8Y2F0ZWdvcnk+PCFbQ0RBVEFbdGVzdF1dPjwvY2F0ZWdvcnk+CiAgICAgICAgICAgIDxkYzpjcmVhdG9yPjwhW0NEQVRBW01hYyBTaXJpXV0+PC9kYzpjcmVhdG9yPgogICAgICAgICAgICA8cHViRGF0ZT5UdWUsIDAyIEphbiAyMDE4IDE5OjA2OjMwIEdNVDwvcHViRGF0ZT4KICAgICAgICAgICAgPGF0b206dXBkYXRlZD4yMDE5LTA2LTE5VDIxOjM4OjA3LjU0OVo8L2F0b206dXBkYXRlZD4KICAgICAgICAgICAgPGNvbnRlbnQ6ZW5jb2RlZD48IVtDREFUQVs8cD55b3V0dWJlIGxpbmvCoGhlcmU8L3A+PGlmcmFtZSBzcmM9Imh0dHBzOi8vY2RuLmVtYmVkbHkuY29tL3dpZGdldHMvbWVkaWEuaHRtbD9zcmM9aHR0cHMlM0ElMkYlMkZ3d3cueW91dHViZS5jb20lMkZlbWJlZCUyRlFPQ2FhY084d3VzJTNGZmVhdHVyZSUzRG9lbWJlZCZhbXA7ZGlzcGxheV9uYW1lPVlvdVR1YmUmYW1wO3VybD1odHRwcyUzQSUyRiUyRnd3dy55b3V0dWJlLmNvbSUyRndhdGNoJTNGdiUzRFFPQ2FhY084d3VzJmFtcDtpbWFnZT1odHRwcyUzQSUyRiUyRmkueXRpbWcuY29tJTJGdmklMkZRT0NhYWNPOHd1cyUyRmhxZGVmYXVsdC5qcGcmYW1wO2tleT1hMTlmY2MxODRiOTcxMWUxYjQ3NjQwNDBkM2RjNWMwNyZhbXA7dHlwZT10ZXh0JTJGaHRtbCZhbXA7c2NoZW1hPXlvdXR1YmUiIHdpZHRoPSI4NTQiIGhlaWdodD0iNDgwIiBmcmFtZWJvcmRlcj0iMCIgc2Nyb2xsaW5nPSJubyI+PGEgaHJlZj0iaHR0cHM6Ly9tZWRpdW0uY29tL21lZGlhLzdkYTc0YmIzMGY4YTJhODJiMGFjYjg5YjIxM2EwMThiL2hyZWYiPmh0dHBzOi8vbWVkaXVtLmNvbS9tZWRpYS83ZGE3NGJiMzBmOGEyYTgyYjBhY2I4OWIyMTNhMDE4Yi9ocmVmPC9hPjwvaWZyYW1lPjxwPnR3ZWV0IGhlcmU8L3A+PHN0eWxlPmJvZHlbZGF0YS10d3R0ci1yZW5kZXJlZD0idHJ1ZSJdIHtiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDt9LnR3aXR0ZXItdHdlZXQge21hcmdpbjogYXV0byAhaW1wb3J0YW50O308L3N0eWxlPjxibG9ja3F1b3RlIGNsYXNzPSJ0d2l0dGVyLXR3ZWV0IiBkYXRhLWNvbnZlcnNhdGlvbj0ibm9uZSIgZGF0YS1hbGlnbj0iY2VudGVyIiBkYXRhLWRudD0idHJ1ZSI+PHA+JiN4MjAwYTsmbWRhc2g7JiN4MjAwYTs8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2JlbmRoYWxwZXJuL3N0YXR1cy85NDgyNTYwODMzNTI3MzU3NDQiPkBiZW5kaGFscGVybjwvYT48L3A+PC9ibG9ja3F1b3RlPjxzY3JpcHQgc3JjPSIvL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanMiIGNoYXJzZXQ9InV0Zi04Ij48L3NjcmlwdD48c2NyaXB0PmZ1bmN0aW9uIG5vdGlmeVJlc2l6ZShoZWlnaHQpIHtoZWlnaHQgPSBoZWlnaHQgPyBoZWlnaHQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0OyB2YXIgcmVzaXplZCA9IGZhbHNlOyBpZiAod2luZG93LmRvbmtleSAmJiBkb25rZXkucmVzaXplKSB7ZG9ua2V5LnJlc2l6ZShoZWlnaHQpO3Jlc2l6ZWQgPSB0cnVlO31pZiAocGFyZW50ICYmIHBhcmVudC5fcmVzaXplSWZyYW1lKSB7dmFyIG9iaiA9IHtpZnJhbWU6IHdpbmRvdy5mcmFtZUVsZW1lbnQsIGhlaWdodDogaGVpZ2h0fTsgcGFyZW50Ll9yZXNpemVJZnJhbWUob2JqKTsgcmVzaXplZCA9IHRydWU7fWlmICh3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICIjYW1wPTEiICYmIHdpbmRvdy5wYXJlbnQgJiYgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSkge3dpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2Uoe3NlbnRpbmVsOiAiYW1wIiwgdHlwZTogImVtYmVkLXNpemUiLCBoZWlnaHQ6IGhlaWdodH0sICIqIik7fWlmICh3aW5kb3cud2Via2l0ICYmIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzICYmIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLnJlc2l6ZSkge3dpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLnJlc2l6ZS5wb3N0TWVzc2FnZShoZWlnaHQpOyByZXNpemVkID0gdHJ1ZTt9cmV0dXJuIHJlc2l6ZWQ7fXR3dHRyLmV2ZW50cy5iaW5kKCdyZW5kZXJlZCcsIGZ1bmN0aW9uIChldmVudCkge25vdGlmeVJlc2l6ZSgpO30pOyB0d3R0ci5ldmVudHMuYmluZCgncmVzaXplJywgZnVuY3Rpb24gKGV2ZW50KSB7bm90aWZ5UmVzaXplKCk7fSk7PC9zY3JpcHQ+PHNjcmlwdD5pZiAocGFyZW50ICYmIHBhcmVudC5fcmVzaXplSWZyYW1lKSB7dmFyIG1heFdpZHRoID0gcGFyc2VJbnQod2luZG93LmZyYW1lRWxlbWVudC5nZXRBdHRyaWJ1dGUoIndpZHRoIikpOyBpZiAoIDUwMCAgPCBtYXhXaWR0aCkge3dpbmRvdy5mcmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJ3aWR0aCIsICI1MDAiKTt9fTwvc2NyaXB0PjxwPkdpdGh1YiBnaXN0wqBoZXJlPC9wPjxpZnJhbWUgc3JjPSIiIHdpZHRoPSIwIiBoZWlnaHQ9IjAiIGZyYW1lYm9yZGVyPSIwIiBzY3JvbGxpbmc9Im5vIj48YSBocmVmPSJodHRwczovL21lZGl1bS5jb20vbWVkaWEvNzc3YWU4YjdkODkxNmU1NjViODRiNzA0YzA4OGNmMGMvaHJlZiI+aHR0cHM6Ly9tZWRpdW0uY29tL21lZGlhLzc3N2FlOGI3ZDg5MTZlNTY1Yjg0YjcwNGMwODhjZjBjL2hyZWY8L2E+PC9pZnJhbWU+PHA+Y29kZSBibG9jazwvcD48cHJlPnRlc3RzZXRzZXRzZXRzZXRzZXRzZXQgbGV0cyBpbnRyb2R1Y2Ugc29tZSB7eyBjaGFvcyB9fTwvcHJlPjxwcmU+SGVyZSYjMzk7cyBtb3JlIHt7IHdoYXQgfX08L3ByZT48cD5zb21lIG1vcmUgY29kZSBhbmQge3sgVkFSSUFCTEUgfX0gYW5kIDxzdHJvbmc+PGVtPnt7IEhUTUzCoH19PC9lbT48L3N0cm9uZz48L3A+PGgzPnt7IGhvdyBhYm91dCB0aGlzwqB9fTwvaDM+PGltZyBzcmM9Imh0dHBzOi8vbWVkaXVtLmNvbS9fL3N0YXQ/ZXZlbnQ9cG9zdC5jbGllbnRWaWV3ZWQmcmVmZXJyZXJTb3VyY2U9ZnVsbF9yc3MmcG9zdElkPTZhZjA0YjdlNTdlMSIgd2lkdGg9IjEiIGhlaWdodD0iMSIgYWx0PSIiPl1dPjwvY29udGVudDplbmNvZGVkPgogICAgICAgIDwvaXRlbT4KICAgIDwvY2hhbm5lbD4KPC9yc3M+
  recorded_at: Wed, 21 Oct 2020 15:08:24 GMT
- request:
    method: get
    uri: https://circleci.com/blog/feed.xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/xml
      Date:
      - Wed, 21 Oct 2020 15:08:18 GMT
      Etag:
      - '"db0e9f9cae7024117d00274d790975a4"'
      Last-Modified:
      - Tue, 20 Oct 2020 20:14:07 GMT
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=15724800
      X-Amz-Id-2:
      - mUIbZKrsO86duyjTLBRI5BVlb7msuP8kjW2YvJhA7fJ6gtzVM9DVKSRmECN2d4Ru0Mf6zHk8gbo=
      X-Amz-Request-Id:
      - B877260F9D01C32F
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '150162'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 21 Oct 2020 15:08:24 GMT
- request:
    method: head
    uri: https://medium.com/media/7da74bb30f8a2a82b0acb89b213a018b/href
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 302
      message: Found
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:23 GMT
      Content-Type:
      - application/octet-stream
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Thu, 09 Sep 1999 09:09:09 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Location:
      - https://www.youtube.com/watch?v=QOCaacO8wus
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - no-cache
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '23'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292903884:abfff1e8dbbd
      X-Opentracing:
      - '{"ot-tracer-spanid":"12c40c4877b0a2ed","ot-tracer-traceid":"415c8d1aebf5724b","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d51790000cd22bdbce000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4c8cd7bcd22-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 21 Oct 2020 15:08:28 GMT
- request:
    method: head
    uri: https://www.youtube.com/watch?v=QOCaacO8wus
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=d5951aa4d56fc63eb06953f38cf4cc51d1603292903; uid=lo_8bb9f62240cb;
        sid=1:d4yGMassxe+kO74MTGhUV38u9QSLZ2PI3S+0dWnhjAzxnzlg/OM0HBHRwD6ppPsG; optimizelyEndUserId=lo_8bb9f62240cb;
        __cfruid=a74f67dec29c1ae55b129880669927def349f8a3-1603292903
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Tue, 27 Apr 1971 19:44:06 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Strict-Transport-Security:
      - max-age=31536000
      P3p:
      - CP="This is not a P3P policy! See http://support.google.com/accounts/answer/151657?hl=it
        for more info."
      Date:
      - Wed, 21 Oct 2020 15:08:24 GMT
      Server:
      - YouTube Frontend Proxy
      X-Xss-Protection:
      - '0'
      Transfer-Encoding:
      - chunked
      Alt-Svc:
      - h3-Q050=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-T051=":443";
        ma=2592000,h3-T050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Accept-Ranges:
      - none
      Vary:
      - Accept-Encoding
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 21 Oct 2020 15:08:29 GMT
- request:
    method: post
    uri: https://api.twitter.com/oauth2/token
    body:
      encoding: UTF-8
      string: grant_type=client_credentials
    headers:
      User-Agent:
      - TwitterRubyGem/7.0.0 (http://localhost:3000)
      Accept:
      - "*/*"
      Connection:
      - close
      Content-Type:
      - application/x-www-form-urlencoded
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store, must-revalidate, pre-check=0, post-check=0
      Connection:
      - close
      Content-Disposition:
      - attachment; filename=json.json
      Content-Length:
      - '153'
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Wed, 21 Oct 2020 15:08:24 GMT
      Expires:
      - Tue, 31 Mar 1981 05:00:00 GMT
      Last-Modified:
      - Wed, 21 Oct 2020 15:08:24 GMT
      Ml:
      - A
      Pragma:
      - no-cache
      Server:
      - tsa_o
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631138519
      X-Connection-Hash:
      - 94dd41835bf72550f796664b05d89a28
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Response-Time:
      - '111'
      X-Transaction:
      - 00a9abab002c971a
      X-Tsa-Request-Body-Time:
      - '0'
      X-Twitter-Response-Tags:
      - BouncerCompliant
      X-Ua-Compatible:
      - IE=edge,chrome=1
      X-Xss-Protection:
      - '0'
    body:
      encoding: UTF-8
      string: '{"token_type":"bearer","access_token":"ACCESS_TOKEN"}'
  recorded_at: Wed, 21 Oct 2020 15:08:29 GMT
- request:
    method: get
    uri: https://api.twitter.com/1.1/statuses/show/948256083352735744.json?tweet_mode=extended
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - TwitterRubyGem/7.0.0 (http://localhost:3000)
      Connection:
      - close
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store, must-revalidate, pre-check=0, post-check=0
      Connection:
      - close
      Content-Disposition:
      - attachment; filename=json.json
      Content-Length:
      - '3726'
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Wed, 21 Oct 2020 15:08:25 GMT
      Expires:
      - Tue, 31 Mar 1981 05:00:00 GMT
      Last-Modified:
      - Wed, 21 Oct 2020 15:08:25 GMT
      Pragma:
      - no-cache
      Server:
      - tsa_o
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631138519
      X-Access-Level:
      - read
      X-Connection-Hash:
      - e766626fee6d10e2ab59372e0d849fb2
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Rate-Limit-Limit:
      - '900'
      X-Rate-Limit-Remaining:
      - '897'
      X-Rate-Limit-Reset:
      - '1603293126'
      X-Response-Time:
      - '184'
      X-Transaction:
      - 006d1711001470fa
      X-Twitter-Response-Tags:
      - BouncerCompliant
      X-Xss-Protection:
      - '0'
    body:
      encoding: UTF-8
      string: '{"created_at":"Tue Jan 02 18:14:02 +0000 2018","id":948256083352735744,"id_str":"948256083352735744","full_text":"I''m
        a full-stack developer https:\/\/t.co\/wvFikfWJ7f","truncated":false,"display_text_range":[0,26],"entities":{"hashtags":[],"symbols":[],"user_mentions":[],"urls":[],"media":[{"id":948256051085770752,"id_str":"948256051085770752","indices":[27,50],"media_url":"http:\/\/pbs.twimg.com\/media\/DSjh2rkVAAApeFR.jpg","media_url_https":"https:\/\/pbs.twimg.com\/media\/DSjh2rkVAAApeFR.jpg","url":"https:\/\/t.co\/wvFikfWJ7f","display_url":"pic.twitter.com\/wvFikfWJ7f","expanded_url":"https:\/\/twitter.com\/bendhalpern\/status\/948256083352735744\/photo\/1","type":"photo","sizes":{"large":{"w":1536,"h":2048,"resize":"fit"},"thumb":{"w":150,"h":150,"resize":"crop"},"medium":{"w":900,"h":1200,"resize":"fit"},"small":{"w":510,"h":680,"resize":"fit"}}}]},"extended_entities":{"media":[{"id":948256051085770752,"id_str":"948256051085770752","indices":[27,50],"media_url":"http:\/\/pbs.twimg.com\/media\/DSjh2rkVAAApeFR.jpg","media_url_https":"https:\/\/pbs.twimg.com\/media\/DSjh2rkVAAApeFR.jpg","url":"https:\/\/t.co\/wvFikfWJ7f","display_url":"pic.twitter.com\/wvFikfWJ7f","expanded_url":"https:\/\/twitter.com\/bendhalpern\/status\/948256083352735744\/photo\/1","type":"photo","sizes":{"large":{"w":1536,"h":2048,"resize":"fit"},"thumb":{"w":150,"h":150,"resize":"crop"},"medium":{"w":900,"h":1200,"resize":"fit"},"small":{"w":510,"h":680,"resize":"fit"}}}]},"source":"\u003ca
        href=\"http:\/\/twitter.com\/download\/iphone\" rel=\"nofollow\"\u003eTwitter
        for iPhone\u003c\/a\u003e","in_reply_to_status_id":948243620846620673,"in_reply_to_status_id_str":"948243620846620673","in_reply_to_user_id":161419043,"in_reply_to_user_id_str":"161419043","in_reply_to_screen_name":"bendhalpern","user":{"id":161419043,"id_str":"161419043","name":"Ben
        Halpern \ud83c\udf31","screen_name":"bendhalpern","location":"Brooklyn, NY\/Beacon,
        NY","description":"Creator and Co-founder of @forem. Coder, buddhist, feminist,
        Batman. He\/Him.","url":"https:\/\/t.co\/qqIzCffhit","entities":{"url":{"urls":[{"url":"https:\/\/t.co\/qqIzCffhit","expanded_url":"http:\/\/dev.to\/ben","display_url":"dev.to\/ben","indices":[0,23]}]},"description":{"urls":[]}},"protected":false,"followers_count":41016,"friends_count":2183,"listed_count":744,"created_at":"Wed
        Jun 30 20:15:57 +0000 2010","favourites_count":37032,"utc_offset":null,"time_zone":null,"geo_enabled":true,"verified":true,"statuses_count":16582,"lang":null,"contributors_enabled":false,"is_translator":false,"is_translation_enabled":false,"profile_background_color":"EDECE9","profile_background_image_url":"http:\/\/abs.twimg.com\/images\/themes\/theme3\/bg.gif","profile_background_image_url_https":"https:\/\/abs.twimg.com\/images\/themes\/theme3\/bg.gif","profile_background_tile":false,"profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1303466766094553088\/4-ZkBcZM_normal.jpg","profile_image_url_https":"https:\/\/pbs.twimg.com\/profile_images\/1303466766094553088\/4-ZkBcZM_normal.jpg","profile_banner_url":"https:\/\/pbs.twimg.com\/profile_banners\/161419043\/1492834234","profile_link_color":"3A1E75","profile_sidebar_border_color":"FFFFFF","profile_sidebar_fill_color":"E3E2DE","profile_text_color":"634047","profile_use_background_image":true,"has_extended_profile":true,"default_profile":false,"default_profile_image":false,"following":null,"follow_request_sent":null,"notifications":null,"translator_type":"none"},"geo":null,"coordinates":null,"place":null,"contributors":null,"is_quote_status":false,"retweet_count":63,"favorite_count":504,"favorited":false,"retweeted":false,"possibly_sensitive":false,"possibly_sensitive_appealable":false,"lang":"en"}'
  recorded_at: Wed, 21 Oct 2020 15:08:30 GMT
- request:
    method: get
    uri: https://medium.com/feed/@vaidehijoshi
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:26 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - private, must-revalidate, max-age=900
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Wed, 21 Oct 2020 15:23:26 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - private
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '26'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292906308:642ecacc8758
      X-Opentracing:
      - '{"ot-tracer-spanid":"5c840ed64a3d3b7f","ot-tracer-traceid":"2d1832952e87c5bb","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d5afd0000cd32918ff000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4d7f845cd32-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 21 Oct 2020 15:08:24 GMT
- request:
    method: get
    uri: https://medium.com/feed/@macsiri/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '67'
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Location:
      - https://medium.com/feed/@macsiri
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      X-Envoy-Upstream-Service-Time:
      - '0'
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d5b0700006f3abf2e7000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4d80d736f3a-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: UTF-8
      string: "<a href=\"https://medium.com/feed/@macsiri\">Moved Permanently</a>.\n\n"
  recorded_at: Wed, 21 Oct 2020 15:08:24 GMT
- request:
    method: get
    uri: https://medium.com/feed/@macsiri
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=d62674a9338f869a81d1fa2820cdccc9d1603292906; __cfruid=3918a442e301dc1c49455926e3d7947968c95345-1603292906
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:26 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - private, must-revalidate, max-age=900
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Wed, 21 Oct 2020 15:23:26 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - private
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '18'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292906675:a42c2004dce8
      X-Opentracing:
      - '{"ot-tracer-spanid":"76e7707c09c1b37f","ot-tracer-traceid":"3b6a42d6d3e1748f","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d5c5d0000cd3e978cd000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4da2c8dcd3e-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48cnNzIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6Y29udGVudD0iaHR0cDovL3B1cmwub3JnL3Jzcy8xLjAvbW9kdWxlcy9jb250ZW50LyIgeG1sbnM6YXRvbT0iaHR0cDovL3d3dy53My5vcmcvMjAwNS9BdG9tIiB2ZXJzaW9uPSIyLjAiIHhtbG5zOmNjPSJodHRwOi8vY3liZXIubGF3LmhhcnZhcmQuZWR1L3Jzcy9jcmVhdGl2ZUNvbW1vbnNSc3NNb2R1bGUuaHRtbCI+CiAgICA8Y2hhbm5lbD4KICAgICAgICA8dGl0bGU+PCFbQ0RBVEFbU3RvcmllcyBieSBNYWMgU2lyaSBvbiBNZWRpdW1dXT48L3RpdGxlPgogICAgICAgIDxkZXNjcmlwdGlvbj48IVtDREFUQVtTdG9yaWVzIGJ5IE1hYyBTaXJpIG9uIE1lZGl1bV1dPjwvZGVzY3JpcHRpb24+CiAgICAgICAgPGxpbms+aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWNzaXJpP3NvdXJjZT1yc3MtNGIyNjA1ZGE5MzhmLS0tLS0tMjwvbGluaz4KICAgICAgICA8aW1hZ2U+CiAgICAgICAgICAgIDx1cmw+aHR0cHM6Ly9jZG4taW1hZ2VzLTEubWVkaXVtLmNvbS9maXQvYy8xNTAvMTUwLzAqdzJibXRXbGFsZEtGbGI4ZS48L3VybD4KICAgICAgICAgICAgPHRpdGxlPlN0b3JpZXMgYnkgTWFjIFNpcmkgb24gTWVkaXVtPC90aXRsZT4KICAgICAgICAgICAgPGxpbms+aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWNzaXJpP3NvdXJjZT1yc3MtNGIyNjA1ZGE5MzhmLS0tLS0tMjwvbGluaz4KICAgICAgICA8L2ltYWdlPgogICAgICAgIDxnZW5lcmF0b3I+TWVkaXVtPC9nZW5lcmF0b3I+CiAgICAgICAgPGxhc3RCdWlsZERhdGU+V2VkLCAyMSBPY3QgMjAyMCAxNDo1Njo1NyBHTVQ8L2xhc3RCdWlsZERhdGU+CiAgICAgICAgPGF0b206bGluayBocmVmPSJodHRwczovL21lZGl1bS5jb20vZmVlZC9AbWFjc2lyaSIgcmVsPSJzZWxmIiB0eXBlPSJhcHBsaWNhdGlvbi9yc3MreG1sIi8+CiAgICAgICAgPHdlYk1hc3Rlcj48IVtDREFUQVt5b3VyZnJpZW5kc0BtZWRpdW0uY29tXV0+PC93ZWJNYXN0ZXI+CiAgICAgICAgPGF0b206bGluayBocmVmPSJodHRwOi8vbWVkaXVtLnN1cGVyZmVlZHIuY29tIiByZWw9Imh1YiIvPgogICAgICAgIDxpdGVtPgogICAgICAgICAgICA8dGl0bGU+PCFbQ0RBVEFbVGVzdGluZyBSU1MgRmVlZF1dPjwvdGl0bGU+CiAgICAgICAgICAgIDxsaW5rPmh0dHBzOi8vbWVkaXVtLmNvbS9AbWFjc2lyaS90ZXN0aW5nLXJzcy1mZWVkLTZhZjA0YjdlNTdlMT9zb3VyY2U9cnNzLTRiMjYwNWRhOTM4Zi0tLS0tLTI8L2xpbms+CiAgICAgICAgICAgIDxndWlkIGlzUGVybWFMaW5rPSJmYWxzZSI+aHR0cHM6Ly9tZWRpdW0uY29tL3AvNmFmMDRiN2U1N2UxPC9ndWlkPgogICAgICAgICAgICA8Y2F0ZWdvcnk+PCFbQ0RBVEFbdGVzdF1dPjwvY2F0ZWdvcnk+CiAgICAgICAgICAgIDxkYzpjcmVhdG9yPjwhW0NEQVRBW01hYyBTaXJpXV0+PC9kYzpjcmVhdG9yPgogICAgICAgICAgICA8cHViRGF0ZT5UdWUsIDAyIEphbiAyMDE4IDE5OjA2OjMwIEdNVDwvcHViRGF0ZT4KICAgICAgICAgICAgPGF0b206dXBkYXRlZD4yMDE5LTA2LTE5VDIxOjM4OjA3LjU0OVo8L2F0b206dXBkYXRlZD4KICAgICAgICAgICAgPGNvbnRlbnQ6ZW5jb2RlZD48IVtDREFUQVs8cD55b3V0dWJlIGxpbmvCoGhlcmU8L3A+PGlmcmFtZSBzcmM9Imh0dHBzOi8vY2RuLmVtYmVkbHkuY29tL3dpZGdldHMvbWVkaWEuaHRtbD9zcmM9aHR0cHMlM0ElMkYlMkZ3d3cueW91dHViZS5jb20lMkZlbWJlZCUyRlFPQ2FhY084d3VzJTNGZmVhdHVyZSUzRG9lbWJlZCZhbXA7ZGlzcGxheV9uYW1lPVlvdVR1YmUmYW1wO3VybD1odHRwcyUzQSUyRiUyRnd3dy55b3V0dWJlLmNvbSUyRndhdGNoJTNGdiUzRFFPQ2FhY084d3VzJmFtcDtpbWFnZT1odHRwcyUzQSUyRiUyRmkueXRpbWcuY29tJTJGdmklMkZRT0NhYWNPOHd1cyUyRmhxZGVmYXVsdC5qcGcmYW1wO2tleT1hMTlmY2MxODRiOTcxMWUxYjQ3NjQwNDBkM2RjNWMwNyZhbXA7dHlwZT10ZXh0JTJGaHRtbCZhbXA7c2NoZW1hPXlvdXR1YmUiIHdpZHRoPSI4NTQiIGhlaWdodD0iNDgwIiBmcmFtZWJvcmRlcj0iMCIgc2Nyb2xsaW5nPSJubyI+PGEgaHJlZj0iaHR0cHM6Ly9tZWRpdW0uY29tL21lZGlhLzdkYTc0YmIzMGY4YTJhODJiMGFjYjg5YjIxM2EwMThiL2hyZWYiPmh0dHBzOi8vbWVkaXVtLmNvbS9tZWRpYS83ZGE3NGJiMzBmOGEyYTgyYjBhY2I4OWIyMTNhMDE4Yi9ocmVmPC9hPjwvaWZyYW1lPjxwPnR3ZWV0IGhlcmU8L3A+PHN0eWxlPmJvZHlbZGF0YS10d3R0ci1yZW5kZXJlZD0idHJ1ZSJdIHtiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDt9LnR3aXR0ZXItdHdlZXQge21hcmdpbjogYXV0byAhaW1wb3J0YW50O308L3N0eWxlPjxibG9ja3F1b3RlIGNsYXNzPSJ0d2l0dGVyLXR3ZWV0IiBkYXRhLWNvbnZlcnNhdGlvbj0ibm9uZSIgZGF0YS1hbGlnbj0iY2VudGVyIiBkYXRhLWRudD0idHJ1ZSI+PHA+JiN4MjAwYTsmbWRhc2g7JiN4MjAwYTs8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2JlbmRoYWxwZXJuL3N0YXR1cy85NDgyNTYwODMzNTI3MzU3NDQiPkBiZW5kaGFscGVybjwvYT48L3A+PC9ibG9ja3F1b3RlPjxzY3JpcHQgc3JjPSIvL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanMiIGNoYXJzZXQ9InV0Zi04Ij48L3NjcmlwdD48c2NyaXB0PmZ1bmN0aW9uIG5vdGlmeVJlc2l6ZShoZWlnaHQpIHtoZWlnaHQgPSBoZWlnaHQgPyBoZWlnaHQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0OyB2YXIgcmVzaXplZCA9IGZhbHNlOyBpZiAod2luZG93LmRvbmtleSAmJiBkb25rZXkucmVzaXplKSB7ZG9ua2V5LnJlc2l6ZShoZWlnaHQpO3Jlc2l6ZWQgPSB0cnVlO31pZiAocGFyZW50ICYmIHBhcmVudC5fcmVzaXplSWZyYW1lKSB7dmFyIG9iaiA9IHtpZnJhbWU6IHdpbmRvdy5mcmFtZUVsZW1lbnQsIGhlaWdodDogaGVpZ2h0fTsgcGFyZW50Ll9yZXNpemVJZnJhbWUob2JqKTsgcmVzaXplZCA9IHRydWU7fWlmICh3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICIjYW1wPTEiICYmIHdpbmRvdy5wYXJlbnQgJiYgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSkge3dpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2Uoe3NlbnRpbmVsOiAiYW1wIiwgdHlwZTogImVtYmVkLXNpemUiLCBoZWlnaHQ6IGhlaWdodH0sICIqIik7fWlmICh3aW5kb3cud2Via2l0ICYmIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzICYmIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLnJlc2l6ZSkge3dpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLnJlc2l6ZS5wb3N0TWVzc2FnZShoZWlnaHQpOyByZXNpemVkID0gdHJ1ZTt9cmV0dXJuIHJlc2l6ZWQ7fXR3dHRyLmV2ZW50cy5iaW5kKCdyZW5kZXJlZCcsIGZ1bmN0aW9uIChldmVudCkge25vdGlmeVJlc2l6ZSgpO30pOyB0d3R0ci5ldmVudHMuYmluZCgncmVzaXplJywgZnVuY3Rpb24gKGV2ZW50KSB7bm90aWZ5UmVzaXplKCk7fSk7PC9zY3JpcHQ+PHNjcmlwdD5pZiAocGFyZW50ICYmIHBhcmVudC5fcmVzaXplSWZyYW1lKSB7dmFyIG1heFdpZHRoID0gcGFyc2VJbnQod2luZG93LmZyYW1lRWxlbWVudC5nZXRBdHRyaWJ1dGUoIndpZHRoIikpOyBpZiAoIDUwMCAgPCBtYXhXaWR0aCkge3dpbmRvdy5mcmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJ3aWR0aCIsICI1MDAiKTt9fTwvc2NyaXB0PjxwPkdpdGh1YiBnaXN0wqBoZXJlPC9wPjxpZnJhbWUgc3JjPSIiIHdpZHRoPSIwIiBoZWlnaHQ9IjAiIGZyYW1lYm9yZGVyPSIwIiBzY3JvbGxpbmc9Im5vIj48YSBocmVmPSJodHRwczovL21lZGl1bS5jb20vbWVkaWEvNzc3YWU4YjdkODkxNmU1NjViODRiNzA0YzA4OGNmMGMvaHJlZiI+aHR0cHM6Ly9tZWRpdW0uY29tL21lZGlhLzc3N2FlOGI3ZDg5MTZlNTY1Yjg0YjcwNGMwODhjZjBjL2hyZWY8L2E+PC9pZnJhbWU+PHA+Y29kZSBibG9jazwvcD48cHJlPnRlc3RzZXRzZXRzZXRzZXRzZXRzZXQgbGV0cyBpbnRyb2R1Y2Ugc29tZSB7eyBjaGFvcyB9fTwvcHJlPjxwcmU+SGVyZSYjMzk7cyBtb3JlIHt7IHdoYXQgfX08L3ByZT48cD5zb21lIG1vcmUgY29kZSBhbmQge3sgVkFSSUFCTEUgfX0gYW5kIDxzdHJvbmc+PGVtPnt7IEhUTUzCoH19PC9lbT48L3N0cm9uZz48L3A+PGgzPnt7IGhvdyBhYm91dCB0aGlzwqB9fTwvaDM+PGltZyBzcmM9Imh0dHBzOi8vbWVkaXVtLmNvbS9fL3N0YXQ/ZXZlbnQ9cG9zdC5jbGllbnRWaWV3ZWQmcmVmZXJyZXJTb3VyY2U9ZnVsbF9yc3MmcG9zdElkPTZhZjA0YjdlNTdlMSIgd2lkdGg9IjEiIGhlaWdodD0iMSIgYWx0PSIiPl1dPjwvY29udGVudDplbmNvZGVkPgogICAgICAgIDwvaXRlbT4KICAgIDwvY2hhbm5lbD4KPC9yc3M+
  recorded_at: Wed, 21 Oct 2020 15:08:24 GMT
- request:
    method: get
    uri: https://circleci.com/blog/feed.xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/xml
      Date:
      - Wed, 21 Oct 2020 15:08:26 GMT
      Etag:
      - '"db0e9f9cae7024117d00274d790975a4"'
      Last-Modified:
      - Tue, 20 Oct 2020 20:14:07 GMT
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=15724800
      X-Amz-Id-2:
      - F2duXlePoaufCj8YM07qc+jwtjUDQkEIGsBuFQXhE9PIcClWzPCVfV7o27LQvsQa0seTYTlrF4I=
      X-Amz-Request-Id:
      - 2A583B8BECA5326D
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '150162'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 21 Oct 2020 15:08:25 GMT
- request:
    method: get
    uri: https://medium.com/feed/@macsiri/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:27 GMT
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '67'
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Location:
      - https://medium.com/feed/@macsiri
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      X-Envoy-Upstream-Service-Time:
      - '0'
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d5f5e0000fc913335d000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4defc6ffc91-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: UTF-8
      string: "<a href=\"https://medium.com/feed/@macsiri\">Moved Permanently</a>.\n\n"
  recorded_at: Wed, 21 Oct 2020 15:08:25 GMT
- request:
    method: get
    uri: https://medium.com/feed/@vaidehijoshi
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:27 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - private, must-revalidate, max-age=900
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Wed, 21 Oct 2020 15:23:27 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - private
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '23'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292907437:6ae2203acf69
      X-Opentracing:
      - '{"ot-tracer-spanid":"1d5855537d6799f6","ot-tracer-traceid":"73b9a742dbfd6442","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d5f540000cd0aafaab000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4dee90fcd0a-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 21 Oct 2020 15:08:25 GMT
- request:
    method: get
    uri: https://medium.com/feed/@macsiri
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=dc9ac6df867961d79467efa0347d418301603292907; __cfruid=5b618d50ac0a6b6551a4fe4e456d72911ebb77bc-1603292907
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 21 Oct 2020 15:08:27 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Sepia-Upstream:
      - medium
      Cache-Control:
      - private, must-revalidate, max-age=900
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://accounts.google.com https://getpocket.com
        https://medium.com https://*.medium.com https://*.medium.com https://medium.com
        https://*.medium.com https://*.algolia.net https://cdn-static-1.medium.com
        https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com https://cdn-audio-1.medium.com
        https://lightstep.medium.systems https://*.branch.io ''self''; font-src data:
        https://*.amazonaws.com https://*.medium.com https://glyph.medium.com https://medium.com
        https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net https://cdn-static-1.medium.com
        ''self''; frame-src chromenull: https: webviewprogressproxy: medium: ''self'';
        img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co https://d1fcbxp97j4nb2.cloudfront.net
        https://d262ilb51hltx0.cloudfront.net https://*.medium.com https://gomiro.medium.com
        https://miro.medium.com https://pbs.twimg.com ''self'' blob:; object-src ''self'';
        script-src ''unsafe-eval'' ''unsafe-inline'' about: https: ''self''; style-src
        ''unsafe-inline'' data: https: ''self''; report-uri https://csp.medium.com'
      Expires:
      - Wed, 21 Oct 2020 15:23:27 GMT
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Medium-Fulfilled-By:
      - valencia/main-20201020-231910-0a4c7cfeb9
      Pragma:
      - private
      X-Content-Type-Options:
      - nosniff
      X-Envoy-Upstream-Service-Time:
      - '19'
      X-Frame-Options:
      - sameorigin
      X-Obvious-Info:
      - 42755-064957c,064957ce014
      X-Obvious-Tid:
      - 1603292907735:9a7cc8d27943
      X-Opentracing:
      - '{"ot-tracer-spanid":"378118cf27263bd6","ot-tracer-traceid":"28acce7c36f012b7","ot-tracer-sampled":"true"}'
      X-Powered-By:
      - Medium
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Xss-Protection:
      - 1; mode=block
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05ed4d60430000cd420c2fb000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5e5be4e069abcd42-FCO
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48cnNzIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6Y29udGVudD0iaHR0cDovL3B1cmwub3JnL3Jzcy8xLjAvbW9kdWxlcy9jb250ZW50LyIgeG1sbnM6YXRvbT0iaHR0cDovL3d3dy53My5vcmcvMjAwNS9BdG9tIiB2ZXJzaW9uPSIyLjAiIHhtbG5zOmNjPSJodHRwOi8vY3liZXIubGF3LmhhcnZhcmQuZWR1L3Jzcy9jcmVhdGl2ZUNvbW1vbnNSc3NNb2R1bGUuaHRtbCI+CiAgICA8Y2hhbm5lbD4KICAgICAgICA8dGl0bGU+PCFbQ0RBVEFbU3RvcmllcyBieSBNYWMgU2lyaSBvbiBNZWRpdW1dXT48L3RpdGxlPgogICAgICAgIDxkZXNjcmlwdGlvbj48IVtDREFUQVtTdG9yaWVzIGJ5IE1hYyBTaXJpIG9uIE1lZGl1bV1dPjwvZGVzY3JpcHRpb24+CiAgICAgICAgPGxpbms+aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWNzaXJpP3NvdXJjZT1yc3MtNGIyNjA1ZGE5MzhmLS0tLS0tMjwvbGluaz4KICAgICAgICA8aW1hZ2U+CiAgICAgICAgICAgIDx1cmw+aHR0cHM6Ly9jZG4taW1hZ2VzLTEubWVkaXVtLmNvbS9maXQvYy8xNTAvMTUwLzAqdzJibXRXbGFsZEtGbGI4ZS48L3VybD4KICAgICAgICAgICAgPHRpdGxlPlN0b3JpZXMgYnkgTWFjIFNpcmkgb24gTWVkaXVtPC90aXRsZT4KICAgICAgICAgICAgPGxpbms+aHR0cHM6Ly9tZWRpdW0uY29tL0BtYWNzaXJpP3NvdXJjZT1yc3MtNGIyNjA1ZGE5MzhmLS0tLS0tMjwvbGluaz4KICAgICAgICA8L2ltYWdlPgogICAgICAgIDxnZW5lcmF0b3I+TWVkaXVtPC9nZW5lcmF0b3I+CiAgICAgICAgPGxhc3RCdWlsZERhdGU+V2VkLCAyMSBPY3QgMjAyMCAxNDo1Njo1NyBHTVQ8L2xhc3RCdWlsZERhdGU+CiAgICAgICAgPGF0b206bGluayBocmVmPSJodHRwczovL21lZGl1bS5jb20vZmVlZC9AbWFjc2lyaSIgcmVsPSJzZWxmIiB0eXBlPSJhcHBsaWNhdGlvbi9yc3MreG1sIi8+CiAgICAgICAgPHdlYk1hc3Rlcj48IVtDREFUQVt5b3VyZnJpZW5kc0BtZWRpdW0uY29tXV0+PC93ZWJNYXN0ZXI+CiAgICAgICAgPGF0b206bGluayBocmVmPSJodHRwOi8vbWVkaXVtLnN1cGVyZmVlZHIuY29tIiByZWw9Imh1YiIvPgogICAgICAgIDxpdGVtPgogICAgICAgICAgICA8dGl0bGU+PCFbQ0RBVEFbVGVzdGluZyBSU1MgRmVlZF1dPjwvdGl0bGU+CiAgICAgICAgICAgIDxsaW5rPmh0dHBzOi8vbWVkaXVtLmNvbS9AbWFjc2lyaS90ZXN0aW5nLXJzcy1mZWVkLTZhZjA0YjdlNTdlMT9zb3VyY2U9cnNzLTRiMjYwNWRhOTM4Zi0tLS0tLTI8L2xpbms+CiAgICAgICAgICAgIDxndWlkIGlzUGVybWFMaW5rPSJmYWxzZSI+aHR0cHM6Ly9tZWRpdW0uY29tL3AvNmFmMDRiN2U1N2UxPC9ndWlkPgogICAgICAgICAgICA8Y2F0ZWdvcnk+PCFbQ0RBVEFbdGVzdF1dPjwvY2F0ZWdvcnk+CiAgICAgICAgICAgIDxkYzpjcmVhdG9yPjwhW0NEQVRBW01hYyBTaXJpXV0+PC9kYzpjcmVhdG9yPgogICAgICAgICAgICA8cHViRGF0ZT5UdWUsIDAyIEphbiAyMDE4IDE5OjA2OjMwIEdNVDwvcHViRGF0ZT4KICAgICAgICAgICAgPGF0b206dXBkYXRlZD4yMDE5LTA2LTE5VDIxOjM4OjA3LjU0OVo8L2F0b206dXBkYXRlZD4KICAgICAgICAgICAgPGNvbnRlbnQ6ZW5jb2RlZD48IVtDREFUQVs8cD55b3V0dWJlIGxpbmvCoGhlcmU8L3A+PGlmcmFtZSBzcmM9Imh0dHBzOi8vY2RuLmVtYmVkbHkuY29tL3dpZGdldHMvbWVkaWEuaHRtbD9zcmM9aHR0cHMlM0ElMkYlMkZ3d3cueW91dHViZS5jb20lMkZlbWJlZCUyRlFPQ2FhY084d3VzJTNGZmVhdHVyZSUzRG9lbWJlZCZhbXA7ZGlzcGxheV9uYW1lPVlvdVR1YmUmYW1wO3VybD1odHRwcyUzQSUyRiUyRnd3dy55b3V0dWJlLmNvbSUyRndhdGNoJTNGdiUzRFFPQ2FhY084d3VzJmFtcDtpbWFnZT1odHRwcyUzQSUyRiUyRmkueXRpbWcuY29tJTJGdmklMkZRT0NhYWNPOHd1cyUyRmhxZGVmYXVsdC5qcGcmYW1wO2tleT1hMTlmY2MxODRiOTcxMWUxYjQ3NjQwNDBkM2RjNWMwNyZhbXA7dHlwZT10ZXh0JTJGaHRtbCZhbXA7c2NoZW1hPXlvdXR1YmUiIHdpZHRoPSI4NTQiIGhlaWdodD0iNDgwIiBmcmFtZWJvcmRlcj0iMCIgc2Nyb2xsaW5nPSJubyI+PGEgaHJlZj0iaHR0cHM6Ly9tZWRpdW0uY29tL21lZGlhLzdkYTc0YmIzMGY4YTJhODJiMGFjYjg5YjIxM2EwMThiL2hyZWYiPmh0dHBzOi8vbWVkaXVtLmNvbS9tZWRpYS83ZGE3NGJiMzBmOGEyYTgyYjBhY2I4OWIyMTNhMDE4Yi9ocmVmPC9hPjwvaWZyYW1lPjxwPnR3ZWV0IGhlcmU8L3A+PHN0eWxlPmJvZHlbZGF0YS10d3R0ci1yZW5kZXJlZD0idHJ1ZSJdIHtiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDt9LnR3aXR0ZXItdHdlZXQge21hcmdpbjogYXV0byAhaW1wb3J0YW50O308L3N0eWxlPjxibG9ja3F1b3RlIGNsYXNzPSJ0d2l0dGVyLXR3ZWV0IiBkYXRhLWNvbnZlcnNhdGlvbj0ibm9uZSIgZGF0YS1hbGlnbj0iY2VudGVyIiBkYXRhLWRudD0idHJ1ZSI+PHA+JiN4MjAwYTsmbWRhc2g7JiN4MjAwYTs8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2JlbmRoYWxwZXJuL3N0YXR1cy85NDgyNTYwODMzNTI3MzU3NDQiPkBiZW5kaGFscGVybjwvYT48L3A+PC9ibG9ja3F1b3RlPjxzY3JpcHQgc3JjPSIvL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanMiIGNoYXJzZXQ9InV0Zi04Ij48L3NjcmlwdD48c2NyaXB0PmZ1bmN0aW9uIG5vdGlmeVJlc2l6ZShoZWlnaHQpIHtoZWlnaHQgPSBoZWlnaHQgPyBoZWlnaHQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0OyB2YXIgcmVzaXplZCA9IGZhbHNlOyBpZiAod2luZG93LmRvbmtleSAmJiBkb25rZXkucmVzaXplKSB7ZG9ua2V5LnJlc2l6ZShoZWlnaHQpO3Jlc2l6ZWQgPSB0cnVlO31pZiAocGFyZW50ICYmIHBhcmVudC5fcmVzaXplSWZyYW1lKSB7dmFyIG9iaiA9IHtpZnJhbWU6IHdpbmRvdy5mcmFtZUVsZW1lbnQsIGhlaWdodDogaGVpZ2h0fTsgcGFyZW50Ll9yZXNpemVJZnJhbWUob2JqKTsgcmVzaXplZCA9IHRydWU7fWlmICh3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICIjYW1wPTEiICYmIHdpbmRvdy5wYXJlbnQgJiYgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSkge3dpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2Uoe3NlbnRpbmVsOiAiYW1wIiwgdHlwZTogImVtYmVkLXNpemUiLCBoZWlnaHQ6IGhlaWdodH0sICIqIik7fWlmICh3aW5kb3cud2Via2l0ICYmIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzICYmIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLnJlc2l6ZSkge3dpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLnJlc2l6ZS5wb3N0TWVzc2FnZShoZWlnaHQpOyByZXNpemVkID0gdHJ1ZTt9cmV0dXJuIHJlc2l6ZWQ7fXR3dHRyLmV2ZW50cy5iaW5kKCdyZW5kZXJlZCcsIGZ1bmN0aW9uIChldmVudCkge25vdGlmeVJlc2l6ZSgpO30pOyB0d3R0ci5ldmVudHMuYmluZCgncmVzaXplJywgZnVuY3Rpb24gKGV2ZW50KSB7bm90aWZ5UmVzaXplKCk7fSk7PC9zY3JpcHQ+PHNjcmlwdD5pZiAocGFyZW50ICYmIHBhcmVudC5fcmVzaXplSWZyYW1lKSB7dmFyIG1heFdpZHRoID0gcGFyc2VJbnQod2luZG93LmZyYW1lRWxlbWVudC5nZXRBdHRyaWJ1dGUoIndpZHRoIikpOyBpZiAoIDUwMCAgPCBtYXhXaWR0aCkge3dpbmRvdy5mcmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJ3aWR0aCIsICI1MDAiKTt9fTwvc2NyaXB0PjxwPkdpdGh1YiBnaXN0wqBoZXJlPC9wPjxpZnJhbWUgc3JjPSIiIHdpZHRoPSIwIiBoZWlnaHQ9IjAiIGZyYW1lYm9yZGVyPSIwIiBzY3JvbGxpbmc9Im5vIj48YSBocmVmPSJodHRwczovL21lZGl1bS5jb20vbWVkaWEvNzc3YWU4YjdkODkxNmU1NjViODRiNzA0YzA4OGNmMGMvaHJlZiI+aHR0cHM6Ly9tZWRpdW0uY29tL21lZGlhLzc3N2FlOGI3ZDg5MTZlNTY1Yjg0YjcwNGMwODhjZjBjL2hyZWY8L2E+PC9pZnJhbWU+PHA+Y29kZSBibG9jazwvcD48cHJlPnRlc3RzZXRzZXRzZXRzZXRzZXRzZXQgbGV0cyBpbnRyb2R1Y2Ugc29tZSB7eyBjaGFvcyB9fTwvcHJlPjxwcmU+SGVyZSYjMzk7cyBtb3JlIHt7IHdoYXQgfX08L3ByZT48cD5zb21lIG1vcmUgY29kZSBhbmQge3sgVkFSSUFCTEUgfX0gYW5kIDxzdHJvbmc+PGVtPnt7IEhUTUzCoH19PC9lbT48L3N0cm9uZz48L3A+PGgzPnt7IGhvdyBhYm91dCB0aGlzwqB9fTwvaDM+PGltZyBzcmM9Imh0dHBzOi8vbWVkaXVtLmNvbS9fL3N0YXQ/ZXZlbnQ9cG9zdC5jbGllbnRWaWV3ZWQmcmVmZXJyZXJTb3VyY2U9ZnVsbF9yc3MmcG9zdElkPTZhZjA0YjdlNTdlMSIgd2lkdGg9IjEiIGhlaWdodD0iMSIgYWx0PSIiPl1dPjwvY29udGVudDplbmNvZGVkPgogICAgICAgIDwvaXRlbT4KICAgIDwvY2hhbm5lbD4KPC9yc3M+
  recorded_at: Wed, 21 Oct 2020 15:08:26 GMT
- request:
    method: get
    uri: https://circleci.com/blog/feed.xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/xml
      Date:
      - Wed, 21 Oct 2020 15:08:27 GMT
      Etag:
      - '"db0e9f9cae7024117d00274d790975a4"'
      Last-Modified:
      - Tue, 20 Oct 2020 20:14:07 GMT
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=15724800
      X-Amz-Id-2:
      - xTaiO45zZxK9RyDsdICZcC1gbqFIWy1sdOv7YYXNEGTUCalrvRXgawWWYBEHjmgVMBbsL5glB24=
      X-Amz-Request-Id:
      - 931B538A83016D89
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '150162'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 21 Oct 2020 15:08:26 GMT
recorded_with: VCR 6.0.0
