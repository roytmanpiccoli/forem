---
http_interactions:
- request:
    method: get
    uri: https://medium.com/feed/@dvirsegal
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 24 Jun 2020 09:14:15 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Opentracing:
      - '{"ot-tracer-spanid":"0ee5cd0853761eef","ot-tracer-traceid":"77056f2423d60445","ot-tracer-sampled":"true"}'
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://getpocket.com https://medium.com https://*.medium.com
        https://*.medium.com https://medium.com https://*.medium.com https://*.algolia.net
        https://cdn-static-1.medium.com https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com
        https://cdn-audio-1.medium.com https://*.lightstep.com https://*.branch.io
        ''self''; font-src data: https://*.amazonaws.com https://*.medium.com https://glyph.medium.com
        https://medium.com https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net
        https://cdn-static-1.medium.com ''self''; frame-src chromenull: https: webviewprogressproxy:
        medium: ''self''; img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co
        https://d1fcbxp97j4nb2.cloudfront.net https://d262ilb51hltx0.cloudfront.net
        https://*.medium.com https://gomiro.medium.com https://miro.medium.com https://pbs.twimg.com
        ''self'' blob:; object-src ''self''; script-src ''unsafe-eval'' ''unsafe-inline''
        about: https: ''self''; style-src ''unsafe-inline'' data: https: ''self'';
        report-uri https://csp.medium.com'
      X-Frame-Options:
      - sameorigin
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Powered-By:
      - Medium
      X-Obvious-Tid:
      - 1592990054931:fbff163bd668
      X-Obvious-Info:
      - 41426-548c7e7,548c7e753fe
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Cache-Control:
      - private, must-revalidate, max-age=900
      Expires:
      - Wed, 24 Jun 2020 09:29:14 GMT
      Pragma:
      - private
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - '03873451d900000e2230873200000001'
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5a855662f9740e22-MXP
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 24 Jun 2020 09:14:15 GMT
- request:
    method: get
    uri: https://medium.com/feed/@dvirsegal
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 24 Jun 2020 09:14:15 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Opentracing:
      - '{"ot-tracer-spanid":"27da2928385d14d3","ot-tracer-traceid":"7dcae6ef55fd13f2","ot-tracer-sampled":"true"}'
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://getpocket.com https://medium.com https://*.medium.com
        https://*.medium.com https://medium.com https://*.medium.com https://*.algolia.net
        https://cdn-static-1.medium.com https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com
        https://cdn-audio-1.medium.com https://*.lightstep.com https://*.branch.io
        ''self''; font-src data: https://*.amazonaws.com https://*.medium.com https://glyph.medium.com
        https://medium.com https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net
        https://cdn-static-1.medium.com ''self''; frame-src chromenull: https: webviewprogressproxy:
        medium: ''self''; img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co
        https://d1fcbxp97j4nb2.cloudfront.net https://d262ilb51hltx0.cloudfront.net
        https://*.medium.com https://gomiro.medium.com https://miro.medium.com https://pbs.twimg.com
        ''self'' blob:; object-src ''self''; script-src ''unsafe-eval'' ''unsafe-inline''
        about: https: ''self''; style-src ''unsafe-inline'' data: https: ''self'';
        report-uri https://csp.medium.com'
      X-Frame-Options:
      - sameorigin
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Powered-By:
      - Medium
      X-Obvious-Tid:
      - 1592990055486:50f3e5bd1125
      X-Obvious-Info:
      - 41426-548c7e7,548c7e753fe
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Cache-Control:
      - private, must-revalidate, max-age=900
      Expires:
      - Wed, 24 Jun 2020 09:29:15 GMT
      Pragma:
      - private
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - '03873453f40000be646f9a7200000001'
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5a8556665f26be64-MXP
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 24 Jun 2020 09:14:15 GMT
- request:
    method: head
    uri: https://medium.com/media/2359a518c3cc79a93d7e7f51c8697cdc/href
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 302
      message: Found
    headers:
      Date:
      - Wed, 24 Jun 2020 09:14:15 GMT
      Content-Type:
      - application/octet-stream
      Connection:
      - keep-alive
      X-Opentracing:
      - '{"ot-tracer-spanid":"3964c44454ec5685","ot-tracer-traceid":"3a4734a355153ff7","ot-tracer-sampled":"true"}'
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://getpocket.com https://medium.com https://*.medium.com
        https://*.medium.com https://medium.com https://*.medium.com https://*.algolia.net
        https://cdn-static-1.medium.com https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com
        https://cdn-audio-1.medium.com https://*.lightstep.com https://*.branch.io
        ''self''; font-src data: https://*.amazonaws.com https://*.medium.com https://glyph.medium.com
        https://medium.com https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net
        https://cdn-static-1.medium.com ''self''; frame-src chromenull: https: webviewprogressproxy:
        medium: ''self''; img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co
        https://d1fcbxp97j4nb2.cloudfront.net https://d262ilb51hltx0.cloudfront.net
        https://*.medium.com https://gomiro.medium.com https://miro.medium.com https://pbs.twimg.com
        ''self'' blob:; object-src ''self''; script-src ''unsafe-eval'' ''unsafe-inline''
        about: https: ''self''; style-src ''unsafe-inline'' data: https: ''self'';
        report-uri https://csp.medium.com'
      X-Frame-Options:
      - sameorigin
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Powered-By:
      - Medium
      X-Obvious-Tid:
      - 1592990055688:1f305ed8c6a1
      X-Obvious-Info:
      - 41426-548c7e7,548c7e753fe
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Expires:
      - Thu, 09 Sep 1999 09:09:09 GMT
      Pragma:
      - no-cache
      Location:
      - https://gph.is/2E7OU4U
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - '03873454c80000e8f7fa1dc200000001'
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5a855667ac36e8f7-MXP
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 24 Jun 2020 09:14:15 GMT
- request:
    method: head
    uri: https://gph.is/2E7OU4U
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=da223e42b4f2b7230e36cf716e7afa42b1592990055; uid=lo_LWiLN6XlAb6p;
        sid=1:I1xzGHGLhvcZESpBM6OJCkxNNY2kCU3I00OgqOm3hhzxNmELDMKDab1AORj6H1ZV; optimizelyEndUserId=lo_LWiLN6XlAb6p;
        __cfruid=1c1d6de9bd5e1d455782c4f72c8c966ffd1dad91-1592990055
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - text/plain
      Location:
      - https://giphy.com/gifs/26DNdV3b6dqn1jzR6
      Cache-Control:
      - max-age=0,no-cache,must-revalidate
      X-Kong-Upstream-Latency:
      - '3'
      X-Kong-Proxy-Latency:
      - '0'
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - kong/0.34-1-enterprise-edition
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 24 Jun 2020 09:14:16 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5120-BWI, cache-lcy19221-LCY
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1592990056.041070,VS0,VE81
      Vary:
      - Authorization
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 24 Jun 2020 09:14:16 GMT
- request:
    method: head
    uri: https://giphy.com/gifs/26DNdV3b6dqn1jzR6
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=da223e42b4f2b7230e36cf716e7afa42b1592990055; uid=lo_LWiLN6XlAb6p;
        sid=1:I1xzGHGLhvcZESpBM6OJCkxNNY2kCU3I00OgqOm3hhzxNmELDMKDab1AORj6H1ZV; optimizelyEndUserId=lo_LWiLN6XlAb6p;
        __cfruid=1c1d6de9bd5e1d455782c4f72c8c966ffd1dad91-1592990055
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '31216'
      Cache-Control:
      - s-maxage=900, no-cache, max-age=0, must-revalidate
      Cache-Tag:
      - 26dndv3b6dqn1jzr6,reactionseditor
      Content-Type:
      - text/html
      Server:
      - nginx
      Via:
      - 1.1 varnish
      - 1.1 varnish
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 24 Jun 2020 09:14:16 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5120-BWI, cache-lcy19259-LCY
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1592990056.271732,VS0,VE414
      Vary:
      - Accept-Encoding, X-UA-Device, Fastly-SSL
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 24 Jun 2020 09:14:16 GMT
- request:
    method: head
    uri: https://medium.com/media/adef2778f8a43d4aba1f48bfdd76b39f/href
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 302
      message: Found
    headers:
      Date:
      - Wed, 24 Jun 2020 09:14:17 GMT
      Content-Type:
      - application/octet-stream
      Connection:
      - keep-alive
      X-Opentracing:
      - '{"ot-tracer-spanid":"095bd9821a91bec4","ot-tracer-traceid":"4831479e7cc2e2c9","ot-tracer-sampled":"true"}'
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://getpocket.com https://medium.com https://*.medium.com
        https://*.medium.com https://medium.com https://*.medium.com https://*.algolia.net
        https://cdn-static-1.medium.com https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com
        https://cdn-audio-1.medium.com https://*.lightstep.com https://*.branch.io
        ''self''; font-src data: https://*.amazonaws.com https://*.medium.com https://glyph.medium.com
        https://medium.com https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net
        https://cdn-static-1.medium.com ''self''; frame-src chromenull: https: webviewprogressproxy:
        medium: ''self''; img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co
        https://d1fcbxp97j4nb2.cloudfront.net https://d262ilb51hltx0.cloudfront.net
        https://*.medium.com https://gomiro.medium.com https://miro.medium.com https://pbs.twimg.com
        ''self'' blob:; object-src ''self''; script-src ''unsafe-eval'' ''unsafe-inline''
        about: https: ''self''; style-src ''unsafe-inline'' data: https: ''self'';
        report-uri https://csp.medium.com'
      X-Frame-Options:
      - sameorigin
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Powered-By:
      - Medium
      X-Obvious-Tid:
      - 1592990057296:d6cbe6da3abe
      X-Obvious-Info:
      - 41426-548c7e7,548c7e753fe
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Expires:
      - Thu, 09 Sep 1999 09:09:09 GMT
      Pragma:
      - no-cache
      Location:
      - https://www.youtube.com/watch?v=JGl8DXxS0bY
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - '0387345b1100000e26de03d200000001'
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5a855671b9ef0e26-MXP
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 24 Jun 2020 09:14:17 GMT
- request:
    method: head
    uri: https://www.youtube.com/watch?v=JGl8DXxS0bY
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=d9d54f06c9217adfa35509132187c49fa1592990057; uid=lo_w20jJQIvHOgu;
        sid=1:9jDqBx7K5Azg31s2vJ7VELKl99KoTdMqMjPkN17JEpTS1j/pOnu+bPByE7e/ppE5; optimizelyEndUserId=lo_w20jJQIvHOgu;
        __cfruid=983d601c018199295b76adef4752eb86dee50871-1592990057
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      P3p:
      - CP="This is not a P3P policy! See http://support.google.com/accounts/answer/151657?hl=it
        for more info."
      Strict-Transport-Security:
      - max-age=31536000
      X-Frame-Options:
      - SAMEORIGIN
      Cache-Control:
      - no-cache
      Expires:
      - Tue, 27 Apr 1971 19:44:06 GMT
      Content-Type:
      - text/html; charset=utf-8
      X-Content-Type-Options:
      - nosniff
      Date:
      - Wed, 24 Jun 2020 09:14:17 GMT
      Server:
      - YouTube Frontend Proxy
      X-Xss-Protection:
      - '0'
      Transfer-Encoding:
      - chunked
      Alt-Svc:
      - h3-28=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443";
        ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443";
        ma=2592000; v="46,43"
      Accept-Ranges:
      - none
      Vary:
      - Accept-Encoding
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 24 Jun 2020 09:14:18 GMT
- request:
    method: head
    uri: https://medium.com/media/fa7019c5fbc7aacb05313ab1ed2b37a1/href
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 302
      message: Found
    headers:
      Date:
      - Wed, 24 Jun 2020 09:14:19 GMT
      Content-Type:
      - application/octet-stream
      Connection:
      - keep-alive
      X-Opentracing:
      - '{"ot-tracer-spanid":"1dc19c787e1f103a","ot-tracer-traceid":"15e24c797a2ed683","ot-tracer-sampled":"true"}'
      Content-Security-Policy:
      - 'default-src ''self''; connect-src https://localhost https://*.instapaper.com
        https://*.stripe.com https://glyph.medium.com https://*.paypal.com https://*.braintree-api.com
        https://*.braintreegateway.com https://getpocket.com https://medium.com https://*.medium.com
        https://*.medium.com https://medium.com https://*.medium.com https://*.algolia.net
        https://cdn-static-1.medium.com https://dnqgz544uhbo8.cloudfront.net https://cdn-videos-1.medium.com
        https://cdn-audio-1.medium.com https://*.lightstep.com https://*.branch.io
        ''self''; font-src data: https://*.amazonaws.com https://*.medium.com https://glyph.medium.com
        https://medium.com https://*.gstatic.com https://dnqgz544uhbo8.cloudfront.net
        https://cdn-static-1.medium.com ''self''; frame-src chromenull: https: webviewprogressproxy:
        medium: ''self''; img-src blob: data: https: ''self''; media-src https://*.cdn.vine.co
        https://d1fcbxp97j4nb2.cloudfront.net https://d262ilb51hltx0.cloudfront.net
        https://*.medium.com https://gomiro.medium.com https://miro.medium.com https://pbs.twimg.com
        ''self'' blob:; object-src ''self''; script-src ''unsafe-eval'' ''unsafe-inline''
        about: https: ''self''; style-src ''unsafe-inline'' data: https: ''self'';
        report-uri https://csp.medium.com'
      X-Frame-Options:
      - sameorigin
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
      X-Ua-Compatible:
      - IE=edge, Chrome=1
      X-Powered-By:
      - Medium
      X-Obvious-Tid:
      - 1592990059215:a4bbf4d61a6
      X-Obvious-Info:
      - 41426-548c7e7,548c7e753fe
      Link:
      - <https://medium.com/humans.txt>; rel="humans"
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Expires:
      - Thu, 09 Sep 1999 09:09:09 GMT
      Pragma:
      - no-cache
      Location:
      - https://youtu.be/UMZnZBJ28ew
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - '038734615c00000f6e7daa3200000001'
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 5a85567bcf7d0f6e-MXP
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 24 Jun 2020 09:14:19 GMT
- request:
    method: head
    uri: https://youtu.be/UMZnZBJ28ew
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=da28f57e7c79356b7c28de2e52b141e4a1592990058; uid=lo_Dkd9ZyYU5hos;
        sid=1:7eZeijilNam4cgFITlhdOG2G4tZ1GP+sqNL+v7YjBQ13clMX/cVNydnr7d1THrqa; optimizelyEndUserId=lo_Dkd9ZyYU5hos;
        __cfruid=2e077d6dcfca529d7cf26e3c33924f698e81d997-1592990059
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 302
      message: Found
    headers:
      Location:
      - https://www.youtube.com/watch?v=UMZnZBJ28ew&feature=youtu.be
      Content-Length:
      - '0'
      Date:
      - Wed, 24 Jun 2020 09:14:19 GMT
      Content-Type:
      - text/html
      Server:
      - YouTube Frontend Proxy
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443";
        ma=2592000; v="46,43"
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 24 Jun 2020 09:14:19 GMT
- request:
    method: head
    uri: https://www.youtube.com/watch?feature=youtu.be&v=UMZnZBJ28ew
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Cookie:
      - __cfduid=da28f57e7c79356b7c28de2e52b141e4a1592990058; uid=lo_Dkd9ZyYU5hos;
        sid=1:7eZeijilNam4cgFITlhdOG2G4tZ1GP+sqNL+v7YjBQ13clMX/cVNydnr7d1THrqa; optimizelyEndUserId=lo_Dkd9ZyYU5hos;
        __cfruid=2e077d6dcfca529d7cf26e3c33924f698e81d997-1592990059
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Strict-Transport-Security:
      - max-age=31536000
      Cache-Control:
      - no-cache
      Expires:
      - Tue, 27 Apr 1971 19:44:06 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Type:
      - text/html; charset=utf-8
      P3p:
      - CP="This is not a P3P policy! See http://support.google.com/accounts/answer/151657?hl=it
        for more info."
      Date:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Server:
      - YouTube Frontend Proxy
      X-Xss-Protection:
      - '0'
      Transfer-Encoding:
      - chunked
      Alt-Svc:
      - h3-28=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443";
        ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443";
        ma=2592000; v="46,43"
      Accept-Ranges:
      - none
      Vary:
      - Accept-Encoding
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 24 Jun 2020 09:14:20 GMT
- request:
    method: post
    uri: https://api.twitter.com/oauth2/token
    body:
      encoding: UTF-8
      string: grant_type=client_credentials
    headers:
      User-Agent:
      - TwitterRubyGem/7.0.0 (http://localhost:3000)
      Accept:
      - "*/*"
      Connection:
      - close
      Content-Type:
      - application/x-www-form-urlencoded
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store, must-revalidate, pre-check=0, post-check=0
      Connection:
      - close
      Content-Disposition:
      - attachment; filename=json.json
      Content-Length:
      - '153'
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Expires:
      - Tue, 31 Mar 1981 05:00:00 GMT
      Last-Modified:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Ml:
      - A
      Pragma:
      - no-cache
      Server:
      - tsa_o
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631138519
      X-Connection-Hash:
      - 2a484367d46f7962d3daab95bd6035b7
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Response-Time:
      - '115'
      X-Transaction:
      - 00d56af500fdd7b9
      X-Tsa-Request-Body-Time:
      - '0'
      X-Twitter-Response-Tags:
      - BouncerCompliant
      X-Ua-Compatible:
      - IE=edge,chrome=1
      X-Xss-Protection:
      - '0'
    body:
      encoding: UTF-8
      string: '{"token_type":"bearer","access_token":"ACCESS_TOKEN"}'
  recorded_at: Wed, 24 Jun 2020 09:14:20 GMT
- request:
    method: get
    uri: https://api.twitter.com/1.1/statuses/show/1220749391172120577.json?tweet_mode=extended
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - TwitterRubyGem/7.0.0 (http://localhost:3000)
      Connection:
      - close
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store, must-revalidate, pre-check=0, post-check=0
      Connection:
      - close
      Content-Disposition:
      - attachment; filename=json.json
      Content-Length:
      - '3762'
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Expires:
      - Tue, 31 Mar 1981 05:00:00 GMT
      Last-Modified:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Pragma:
      - no-cache
      Server:
      - tsa_o
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631138519
      X-Access-Level:
      - read
      X-Connection-Hash:
      - afc91a0bbb5221370bad86ad996814f0
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Rate-Limit-Limit:
      - '900'
      X-Rate-Limit-Remaining:
      - '898'
      X-Rate-Limit-Reset:
      - '1592990768'
      X-Response-Time:
      - '129'
      X-Transaction:
      - 00db061c00e847d1
      X-Twitter-Response-Tags:
      - BouncerCompliant
      X-Xss-Protection:
      - '0'
    body:
      encoding: UTF-8
      string: '{"created_at":"Fri Jan 24 16:45:09 +0000 2020","id":1220749391172120577,"id_str":"1220749391172120577","full_text":"\"So,
        can you share your effort estimation for this feature?\"\n\nSW team: https:\/\/t.co\/Z7ocAFwMNn","truncated":false,"display_text_range":[0,70],"entities":{"hashtags":[],"symbols":[],"user_mentions":[],"urls":[],"media":[{"id":1220749388898762753,"id_str":"1220749388898762753","indices":[71,94],"media_url":"http:\/\/pbs.twimg.com\/media\/EPD5GfUWAAEf3YN.jpg","media_url_https":"https:\/\/pbs.twimg.com\/media\/EPD5GfUWAAEf3YN.jpg","url":"https:\/\/t.co\/Z7ocAFwMNn","display_url":"pic.twitter.com\/Z7ocAFwMNn","expanded_url":"https:\/\/twitter.com\/dvir_segal\/status\/1220749391172120577\/photo\/1","type":"photo","sizes":{"small":{"w":560,"h":315,"resize":"fit"},"thumb":{"w":150,"h":150,"resize":"crop"},"large":{"w":560,"h":315,"resize":"fit"},"medium":{"w":560,"h":315,"resize":"fit"}}}]},"extended_entities":{"media":[{"id":1220749388898762753,"id_str":"1220749388898762753","indices":[71,94],"media_url":"http:\/\/pbs.twimg.com\/media\/EPD5GfUWAAEf3YN.jpg","media_url_https":"https:\/\/pbs.twimg.com\/media\/EPD5GfUWAAEf3YN.jpg","url":"https:\/\/t.co\/Z7ocAFwMNn","display_url":"pic.twitter.com\/Z7ocAFwMNn","expanded_url":"https:\/\/twitter.com\/dvir_segal\/status\/1220749391172120577\/photo\/1","type":"photo","sizes":{"small":{"w":560,"h":315,"resize":"fit"},"thumb":{"w":150,"h":150,"resize":"crop"},"large":{"w":560,"h":315,"resize":"fit"},"medium":{"w":560,"h":315,"resize":"fit"}}}]},"source":"\u003ca
        href=\"http:\/\/twitter.com\/download\/android\" rel=\"nofollow\"\u003eTwitter
        for Android\u003c\/a\u003e","in_reply_to_status_id":null,"in_reply_to_status_id_str":null,"in_reply_to_user_id":null,"in_reply_to_user_id_str":null,"in_reply_to_screen_name":null,"user":{"id":733925801624784896,"id_str":"733925801624784896","name":"Dvir
        Segal","screen_name":"dvir_segal","location":"","description":"Tech lead,
        senior software engineer, love to ask questions and write about their answers.
        not a bot \ud83e\udd16.","url":"https:\/\/t.co\/PlzunMn19Z","entities":{"url":{"urls":[{"url":"https:\/\/t.co\/PlzunMn19Z","expanded_url":"https:\/\/medium.com\/@dvirsegal","display_url":"medium.com\/@dvirsegal","indices":[0,23]}]},"description":{"urls":[]}},"protected":false,"followers_count":67,"friends_count":89,"listed_count":0,"created_at":"Sat
        May 21 07:42:01 +0000 2016","favourites_count":356,"utc_offset":null,"time_zone":null,"geo_enabled":false,"verified":false,"statuses_count":471,"lang":null,"contributors_enabled":false,"is_translator":false,"is_translation_enabled":false,"profile_background_color":"000000","profile_background_image_url":"http:\/\/abs.twimg.com\/images\/themes\/theme1\/bg.png","profile_background_image_url_https":"https:\/\/abs.twimg.com\/images\/themes\/theme1\/bg.png","profile_background_tile":false,"profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1231586401675829248\/tVgack-h_normal.jpg","profile_image_url_https":"https:\/\/pbs.twimg.com\/profile_images\/1231586401675829248\/tVgack-h_normal.jpg","profile_banner_url":"https:\/\/pbs.twimg.com\/profile_banners\/733925801624784896\/1566731922","profile_link_color":"808080","profile_sidebar_border_color":"000000","profile_sidebar_fill_color":"000000","profile_text_color":"000000","profile_use_background_image":false,"has_extended_profile":false,"default_profile":false,"default_profile_image":false,"following":null,"follow_request_sent":null,"notifications":null,"translator_type":"none"},"geo":null,"coordinates":null,"place":null,"contributors":null,"is_quote_status":false,"retweet_count":1,"favorite_count":4,"favorited":false,"retweeted":false,"possibly_sensitive":false,"possibly_sensitive_appealable":false,"lang":"en"}'
  recorded_at: Wed, 24 Jun 2020 09:14:20 GMT
- request:
    method: post
    uri: https://api.twitter.com/oauth2/token
    body:
      encoding: UTF-8
      string: grant_type=client_credentials
    headers:
      User-Agent:
      - TwitterRubyGem/7.0.0 (http://localhost:3000)
      Accept:
      - "*/*"
      Connection:
      - close
      Content-Type:
      - application/x-www-form-urlencoded
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store, must-revalidate, pre-check=0, post-check=0
      Connection:
      - close
      Content-Disposition:
      - attachment; filename=json.json
      Content-Length:
      - '153'
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Expires:
      - Tue, 31 Mar 1981 05:00:00 GMT
      Last-Modified:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Ml:
      - A
      Pragma:
      - no-cache
      Server:
      - tsa_o
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631138519
      X-Connection-Hash:
      - 725d033af181b5e63d96c363193e22aa
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Response-Time:
      - '123'
      X-Transaction:
      - 000c17c900459aed
      X-Tsa-Request-Body-Time:
      - '0'
      X-Twitter-Response-Tags:
      - BouncerCompliant
      X-Ua-Compatible:
      - IE=edge,chrome=1
      X-Xss-Protection:
      - '0'
    body:
      encoding: UTF-8
      string: '{"token_type":"bearer","access_token":"ACCESS_TOKEN"}'
  recorded_at: Wed, 24 Jun 2020 09:14:20 GMT
- request:
    method: get
    uri: https://api.twitter.com/1.1/statuses/show/1236979823098109953.json?tweet_mode=extended
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - TwitterRubyGem/7.0.0 (http://localhost:3000)
      Connection:
      - close
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store, must-revalidate, pre-check=0, post-check=0
      Connection:
      - close
      Content-Disposition:
      - attachment; filename=json.json
      Content-Length:
      - '2928'
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Expires:
      - Tue, 31 Mar 1981 05:00:00 GMT
      Last-Modified:
      - Wed, 24 Jun 2020 09:14:20 GMT
      Pragma:
      - no-cache
      Server:
      - tsa_o
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631138519
      X-Access-Level:
      - read
      X-Connection-Hash:
      - 30f118d24427de448e1af328eb950feb
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Rate-Limit-Limit:
      - '900'
      X-Rate-Limit-Remaining:
      - '897'
      X-Rate-Limit-Reset:
      - '1592990768'
      X-Response-Time:
      - '129'
      X-Transaction:
      - '00297728002c5e24'
      X-Twitter-Response-Tags:
      - BouncerCompliant
      X-Xss-Protection:
      - '0'
    body:
      encoding: UTF-8
      string: '{"created_at":"Mon Mar 09 11:39:06 +0000 2020","id":1236979823098109953,"id_str":"1236979823098109953","full_text":"I
        feel that the more I learn about #softwaredevelopment effort estimation, the
        more I realize that there''s still so much more to learn - #devs what''s the
        \"optimal\" way to estimate a feature?\n\n#developer #SoftwareEngineering  #projectmanagement
        #timemanagement","truncated":false,"display_text_range":[0,259],"entities":{"hashtags":[{"text":"softwaredevelopment","indices":[35,55]},{"text":"devs","indices":[137,142]},{"text":"developer","indices":[192,202]},{"text":"SoftwareEngineering","indices":[203,223]},{"text":"projectmanagement","indices":[225,243]},{"text":"timemanagement","indices":[244,259]}],"symbols":[],"user_mentions":[],"urls":[]},"source":"\u003ca
        href=\"https:\/\/mobile.twitter.com\" rel=\"nofollow\"\u003eTwitter Web App\u003c\/a\u003e","in_reply_to_status_id":null,"in_reply_to_status_id_str":null,"in_reply_to_user_id":null,"in_reply_to_user_id_str":null,"in_reply_to_screen_name":null,"user":{"id":733925801624784896,"id_str":"733925801624784896","name":"Dvir
        Segal","screen_name":"dvir_segal","location":"","description":"Tech lead,
        senior software engineer, love to ask questions and write about their answers.
        not a bot \ud83e\udd16.","url":"https:\/\/t.co\/PlzunMn19Z","entities":{"url":{"urls":[{"url":"https:\/\/t.co\/PlzunMn19Z","expanded_url":"https:\/\/medium.com\/@dvirsegal","display_url":"medium.com\/@dvirsegal","indices":[0,23]}]},"description":{"urls":[]}},"protected":false,"followers_count":67,"friends_count":89,"listed_count":0,"created_at":"Sat
        May 21 07:42:01 +0000 2016","favourites_count":356,"utc_offset":null,"time_zone":null,"geo_enabled":false,"verified":false,"statuses_count":471,"lang":null,"contributors_enabled":false,"is_translator":false,"is_translation_enabled":false,"profile_background_color":"000000","profile_background_image_url":"http:\/\/abs.twimg.com\/images\/themes\/theme1\/bg.png","profile_background_image_url_https":"https:\/\/abs.twimg.com\/images\/themes\/theme1\/bg.png","profile_background_tile":false,"profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1231586401675829248\/tVgack-h_normal.jpg","profile_image_url_https":"https:\/\/pbs.twimg.com\/profile_images\/1231586401675829248\/tVgack-h_normal.jpg","profile_banner_url":"https:\/\/pbs.twimg.com\/profile_banners\/733925801624784896\/1566731922","profile_link_color":"808080","profile_sidebar_border_color":"000000","profile_sidebar_fill_color":"000000","profile_text_color":"000000","profile_use_background_image":false,"has_extended_profile":false,"default_profile":false,"default_profile_image":false,"following":null,"follow_request_sent":null,"notifications":null,"translator_type":"none"},"geo":null,"coordinates":null,"place":null,"contributors":null,"is_quote_status":false,"retweet_count":1,"favorite_count":1,"favorited":false,"retweeted":false,"lang":"en"}'
  recorded_at: Wed, 24 Jun 2020 09:14:21 GMT
- request:
    method: post
    uri: https://api.twitter.com/oauth2/token
    body:
      encoding: UTF-8
      string: grant_type=client_credentials
    headers:
      User-Agent:
      - TwitterRubyGem/7.0.0 (http://localhost:3000)
      Accept:
      - "*/*"
      Connection:
      - close
      Content-Type:
      - application/x-www-form-urlencoded
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store, must-revalidate, pre-check=0, post-check=0
      Connection:
      - close
      Content-Disposition:
      - attachment; filename=json.json
      Content-Length:
      - '153'
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Wed, 24 Jun 2020 09:14:21 GMT
      Expires:
      - Tue, 31 Mar 1981 05:00:00 GMT
      Last-Modified:
      - Wed, 24 Jun 2020 09:14:21 GMT
      Ml:
      - A
      Pragma:
      - no-cache
      Server:
      - tsa_o
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631138519
      X-Connection-Hash:
      - 5e42c4bf1aa292d92163e05695140af8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Response-Time:
      - '117'
      X-Transaction:
      - 004e7501009f7527
      X-Tsa-Request-Body-Time:
      - '1'
      X-Twitter-Response-Tags:
      - BouncerCompliant
      X-Ua-Compatible:
      - IE=edge,chrome=1
      X-Xss-Protection:
      - '0'
    body:
      encoding: UTF-8
      string: '{"token_type":"bearer","access_token":"ACCESS_TOKEN"}'
  recorded_at: Wed, 24 Jun 2020 09:14:21 GMT
- request:
    method: get
    uri: https://api.twitter.com/1.1/statuses/show/1136194197814272001.json?tweet_mode=extended
    body:
      encoding: UTF-8
      string: ''
    headers:
      User-Agent:
      - TwitterRubyGem/7.0.0 (http://localhost:3000)
      Connection:
      - close
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store, must-revalidate, pre-check=0, post-check=0
      Connection:
      - close
      Content-Disposition:
      - attachment; filename=json.json
      Content-Length:
      - '2518'
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Wed, 24 Jun 2020 09:14:21 GMT
      Expires:
      - Tue, 31 Mar 1981 05:00:00 GMT
      Last-Modified:
      - Wed, 24 Jun 2020 09:14:21 GMT
      Pragma:
      - no-cache
      Server:
      - tsa_o
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=631138519
      X-Access-Level:
      - read
      X-Connection-Hash:
      - 40fa459e8ac035107572f76123d74238
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Rate-Limit-Limit:
      - '900'
      X-Rate-Limit-Remaining:
      - '896'
      X-Rate-Limit-Reset:
      - '1592990768'
      X-Response-Time:
      - '124'
      X-Transaction:
      - 004fb95e003e1b02
      X-Twitter-Response-Tags:
      - BouncerCompliant
      X-Xss-Protection:
      - '0'
    body:
      encoding: UTF-8
      string: '{"created_at":"Wed Jun 05 08:53:00 +0000 2019","id":1136194197814272001,"id_str":"1136194197814272001","full_text":"\"full-stack\"
        now means you can:\n\nbuild front-ends\nwrite back-ends\nhandle devops\nstart
        a podcast\ncurate a newsletter\ncrack an egg with one hand\nanimate a Pixar
        movie\ndunk","truncated":false,"display_text_range":[0,169],"entities":{"hashtags":[],"symbols":[],"user_mentions":[],"urls":[]},"source":"\u003ca
        href=\"https:\/\/mobile.twitter.com\" rel=\"nofollow\"\u003eTwitter Web App\u003c\/a\u003e","in_reply_to_status_id":null,"in_reply_to_status_id_str":null,"in_reply_to_user_id":null,"in_reply_to_user_id_str":null,"in_reply_to_screen_name":null,"user":{"id":564919357,"id_str":"564919357","name":"I
        Am Devloper","screen_name":"iamdevloper","location":"Localhost","description":"just
        your friendly neighbourhood printer fixer\n\n\ud83d\udcb0 in tweet = ad","url":"https:\/\/t.co\/Wnun5VAtmt","entities":{"url":{"urls":[{"url":"https:\/\/t.co\/Wnun5VAtmt","expanded_url":"https:\/\/iamdevloper.io","display_url":"iamdevloper.io","indices":[0,23]}]},"description":{"urls":[]}},"protected":false,"followers_count":398264,"friends_count":0,"listed_count":4302,"created_at":"Fri
        Apr 27 21:06:51 +0000 2012","favourites_count":1,"utc_offset":null,"time_zone":null,"geo_enabled":false,"verified":false,"statuses_count":5847,"lang":null,"contributors_enabled":false,"is_translator":false,"is_translation_enabled":false,"profile_background_color":"131516","profile_background_image_url":"http:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif","profile_background_image_url_https":"https:\/\/abs.twimg.com\/images\/themes\/theme14\/bg.gif","profile_background_tile":true,"profile_image_url":"http:\/\/pbs.twimg.com\/profile_images\/1178631635606151168\/yIlrcg4o_normal.jpg","profile_image_url_https":"https:\/\/pbs.twimg.com\/profile_images\/1178631635606151168\/yIlrcg4o_normal.jpg","profile_banner_url":"https:\/\/pbs.twimg.com\/profile_banners\/564919357\/1569874159","profile_link_color":"009999","profile_sidebar_border_color":"EEEEEE","profile_sidebar_fill_color":"EFEFEF","profile_text_color":"333333","profile_use_background_image":true,"has_extended_profile":true,"default_profile":false,"default_profile_image":false,"following":null,"follow_request_sent":null,"notifications":null,"translator_type":"none"},"geo":null,"coordinates":null,"place":null,"contributors":null,"is_quote_status":false,"retweet_count":7935,"favorite_count":28410,"favorited":false,"retweeted":false,"lang":"en"}'
  recorded_at: Wed, 24 Jun 2020 09:14:21 GMT
recorded_with: VCR 6.0.0
